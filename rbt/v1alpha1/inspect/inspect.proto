syntax = "proto3";

package rbt.v1alpha1.inspect;

import "google/api/annotations.proto";
import "google/api/httpbody.proto";

////////////////////////////////////////////////////////////////////////

message GetAllStatesRequest {
  // If set, only return actors held by the given consensus ID. If not set (or
  // left at default), return all actors held by all consensuses.
  string only_consensus_id = 1;
}

message GetAllStatesResponse {
  // Data is returned as a `chunk`, e.g, 3 (zero based), of some
  // `total`, e.g., 4, so as to account for max message size which is
  // 4MB by default for gRPC (and actually 1MB by default for Envoy's
  // gRPC-JSON transcoder which we set to also be 4MB to match gRPC).
  uint32 chunk = 2;
  uint32 total = 3;

  // Serialized bytes of a `google.protobuf.Struct`. It is of the
  // form:
  //
  // { "service1": { "id1": { ... }, "id": { ... }, ... }, ... }
  //
  // TODO: consider passing JSON patches in the future to make the
  // data more easily introspectable instead of binary.
  bytes data = 4;

  reserved 1;
}

////////////////////////////////////////////////////////////////////////

service Inspect {
  // Get all actors.
  rpc GetAllStates(GetAllStatesRequest) returns (stream GetAllStatesResponse) {
  }

  // Serve a web dashboard. Uses `HttpBody` to return arbitrary content (HTML,
  // JS) to callers; see `httpbody.proto` for more details.
  rpc WebDashboard(WebDashboardRequest) returns (google.api.HttpBody) {
    option (google.api.http) = {
      get: "/__/inspect"
      additional_bindings {
        // The 'index.html' will want to load a few further files,
        // most notably 'bundle.js'.
        get: "/__/inspect/{file=*}"
      }
    };
  }
}

////////////////////////////////////////////////////////////////////////

message WebDashboardRequest {
  string file = 1;
}
