syntax = "proto3";

package rbt.v1alpha1;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

////////////////////////////////////////////////////////////////////////

message TaskId {
  string state_type = 1;
  string state_ref = 2;
  bytes task_uuid = 3;
}

message TaskInfo {
  enum Status {
    UNKNOWN = 0;
    STARTED = 1;
    // If task is SCHEDULED, it means that it was scheduled and is waiting
    // for its turn to be executed for the first time.
    SCHEDULED = 2;
    // If task is SCHEDULED_RETRY, it means that it was scheduled, but
    // failed and is waiting for some backoff before retrying.
    SCHEDULED_RETRY = 3;
    // If task is CANCELLED, it means that it was cancelled before it was
    // completed by a tasks service.
    CANCELLED = 4;
    // If task is COMPLETED, it means that it was executed and completed
    // successfully.
    COMPLETED = 5;
  }
  Status status = 1;
  TaskId task_id = 2;
  string method = 3;
  // When we got to this state. Always there.
  google.protobuf.Timestamp occurred_at = 4;
  // When we expect to next transition. Only for scheduled statuses.
  google.protobuf.Timestamp scheduled_at = 5;
  uint64 iterations = 6;
  // Number of runs that failed in a retry loop recently (since the consensus
  // most recently came up).
  uint64 num_runs_failed_recently = 7;
}

////////////////////////////////////////////////////////////////////////

message WaitRequest {
  TaskId task_id = 1;
}

message TaskResponseOrError {
  oneof response_or_error {
    google.protobuf.Any response = 1;
    google.protobuf.Any error = 2;
  }
}

message WaitResponse {
  TaskResponseOrError response_or_error = 1;
}

////////////////////////////////////////////////////////////////////////

message ListTasksRequest {
  // If set, only return pending tasks held by the given consensus ID. If not
  // set (or left at default), return all pending tasks held by all consensuses.
  optional string only_consensus_id = 1;
}

message ListTasksResponse {
  repeated TaskInfo tasks = 1;
}

////////////////////////////////////////////////////////////////////////

message CancelTaskRequest {
  TaskId task_id = 1;
}

message CancelTaskResponse {
  enum Status {
    OK = 0;
    NOT_FOUND = 1;
    CANCELLING = 2;
  }
  Status status = 1;
}

message TaskCancelledError {
}

////////////////////////////////////////////////////////////////////////

service Tasks {
  rpc Wait(WaitRequest) returns (WaitResponse);
  rpc ListTasks(ListTasksRequest)
      returns (ListTasksResponse);
  rpc CancelTask(CancelTaskRequest) returns (CancelTaskResponse);
}

////////////////////////////////////////////////////////////////////////
