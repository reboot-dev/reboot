/* eslint-disable */
// @ts-nocheck

{% if google_protobuf_used_messages is defined and google_protobuf_used_messages|length > 0%}
import {
  {{ google_protobuf_used_messages|join(', \n	') }}
} from "@bufbuild/protobuf";
{% endif %}
import * as reboot_api from "@reboot-dev/reboot-api";
import * as reboot_web from "@reboot-dev/reboot-web";
import { v4 as uuidv4 } from "uuid";
{% if proto.messages_and_enums|length > 0 or states|length > 0 %}
// NOTE NOTE NOTE
//
// If you are reading this comment because you are trying to debug
// the error:
//
// Module not found: Error: Can't resolve './{{ pb_name }}.js'
//
// You can resolve this by passing --web-extensions to `rbt
// generate` (or better put it in your `.rbtrc` file).
//
// This is a known issue if you're using `webpack` which uses
// `ts-loader` (https://github.com/TypeStrong/ts-loader/issues/465).
import {
  {# Since we are creating a new class named {{ state.proto.name }}, we
   cannot import it from {{ pb_name }}.js as it would conflict. Instead
   we alias it inside this file and export that type as {{
   state.proto.name }}.State for developers to use. When a user is
   using Zod {{ state.proto.name }}.State aliases to their Zod type. #}
  {% for state in states %}
  {# NOTE: we already rewrite state types that are used in `method.input_type`
   or `method.output_type` with a `Proto` suffix to not conflict with our
   new class named {{ state.proto.name }}, so that is what we want to
   import as. #}
  {{ state.proto.name }} as {{ state.proto.name }}Proto,
  {% endfor %}
} from "./{{ pb_name }}{% if web_extensions %}.js{% endif %}";
{# We import this because many `method.input_type` or `method.output_type` has
already been converted to use `pb_name`. #}
import * as {{ pb_name }} from "./{{ pb_name }}{% if web_extensions %}.js{% endif %}";
{% if not options.proto.zod %}
// Additionally re-export all messages_and_enums from the pb module.
export {
  {% for message in proto.messages_and_enums | unique | list %}
  {{ message }},
  {% endfor %}
} from "./{{ pb_name }}{% if web_extensions %}.js{% endif %}";
{% endif %}
{% endif %}

import * as protobuf_es from "@bufbuild/protobuf";

{% if imports|length > 0%}
// Include all transitive imports.
{% for import_path, unique_name in imports.items() %}
import * as {{ unique_name }} from "{{ import_path }}{% if web_extensions %}.js{% endif %}";
{% endfor %}
{% endif %}

{% if options.proto.zod %}
import { z } from "zod/v4";
import { api } from "{{ options.proto.zod }}{% if web_extensions %}.js{% endif %}";
{% endif %}

const ERROR_TYPES = [
  // gRPC errors.
  reboot_api.errors_pb.Cancelled,
  reboot_api.errors_pb.Unknown,
  reboot_api.errors_pb.InvalidArgument,
  reboot_api.errors_pb.DeadlineExceeded,
  reboot_api.errors_pb.NotFound,
  reboot_api.errors_pb.AlreadyExists,
  reboot_api.errors_pb.PermissionDenied,
  reboot_api.errors_pb.ResourceExhausted,
  reboot_api.errors_pb.FailedPrecondition,
  reboot_api.errors_pb.Aborted,
  reboot_api.errors_pb.OutOfRange,
  reboot_api.errors_pb.Unimplemented,
  reboot_api.errors_pb.Internal,
  reboot_api.errors_pb.Unavailable,
  reboot_api.errors_pb.DataLoss,
  reboot_api.errors_pb.Unauthenticated,
  // Reboot errors.
  //
  // NOTE: also add any new errors into `rbt/v1alpha1/index.ts`.
  reboot_api.errors_pb.StateAlreadyConstructed,
  reboot_api.errors_pb.StateNotConstructed,
  reboot_api.errors_pb.TransactionParticipantFailedToPrepare,
  reboot_api.errors_pb.TransactionParticipantFailedToCommit,
  reboot_api.errors_pb.UnknownService,
  reboot_api.errors_pb.UnknownTask,
] as const; // Need `as const` to ensure TypeScript infers this as a tuple!

{% for state in states %}
{% for service in state.services %}
{% for method in service.methods %}

// Helper for getting the expected shape of a request, i.e., either a
// Zod shape or a protobuf instance, from a protobuf shape.
const {{ state.proto.name }}{{ method.proto.name }}RequestFromProtobufShape = (
  partialRequest: protobuf_es.PartialMessage<{{ method.input_type }}>
): {{ state.proto.name }}.{{ method.proto.name }}Request => {
  // TOOD: update `convertFromProtobuf()` to actually work from
  // any objects that match the shape, not just protobuf instances,
  // and then we won't need to first call `fromJson()` here.
  const request = partialRequest instanceof {{ method.input_type }}
    ? partialRequest
    : {{ method.input_type }}.fromJson(partialRequest);

  {% if options.proto.zod %}
  return reboot_api.validate(
    "{{ state.proto.name }}.methods.{{ method.proto.name | to_lower_camel }}.request",
    api.{{ state.proto.name }}.methods.{{ method.proto.name | to_lower_camel }}.request,
    reboot_api.convertFromProtobuf(
      api.{{ state.proto.name }}.methods.{{ method.proto.name | to_lower_camel }}.request,
      request
    )
  );
  {% else %}
  return request;
  {% endif %}
};

// Helper for getting the expected shape of a request, i.e., either a
// Zod shape or a protobuf instance, from a JSON string.
const {{ state.proto.name }}{{ method.proto.name }}RequestFromJsonString = (
  jsonRequest: string
): {{ state.proto.name }}.{{ method.proto.name }}Request => {
  return {{ state.proto.name }}{{ method.proto.name }}RequestFromProtobufShape(
    {{ method.input_type }}.fromJsonString(jsonRequest)
  );
};

// Helper for getting a protobuf instance for a request from the
// expected shape, i.e., either a Zod shape or a protobuf shape.
const {{ state.proto.name }}{{ method.proto.name }}RequestToProtobuf = (
  partialRequest?: {{ state.proto.name }}.Partial{{ method.proto.name }}Request
): {{ method.input_type }} => {
  return partialRequest instanceof {{ method.input_type }}
    ? partialRequest
    : new {{ method.input_type }}(
      {% if options.proto.zod %}
      reboot_api.convertToProtobufJson(
        api.{{ state.proto.name }}.methods.{{ method.proto.name | to_lower_camel }}.request,
        reboot_api.validate(
          "{{ state.proto.name }}.methods.{{ method.proto.name | to_lower_camel }}.request",
          api.{{ state.proto.name }}.methods.{{ method.proto.name | to_lower_camel }}.request,
          partialRequest || {}
        )
      )
      {% else %}
      partialRequest
      {% endif %}
    );
};

const {{ state.proto.name }}{{ method.proto.name }}ResponseFromProtobufShape = (
  partialResponse: protobuf_es.PartialMessage<{{ method.output_type }}>
) => {
  // TOOD: update `convertFromProtobuf()` to actually work from
  // any objects that match the shape, not just protobuf instances,
  // and then we won't need to first call `fromJson()` here.
  const response = partialResponse instanceof {{ method.output_type }}
    ? partialResponse
    : {{ method.output_type }}.fromJson(partialResponse);

  {% if options.proto.zod %}
  return reboot_api.validate(
    "{{ state.proto.name }}.methods.{{ method.proto.name | to_lower_camel }}.response",
    api.{{ state.proto.name }}.methods.{{ method.proto.name | to_lower_camel }}.response,
    reboot_api.convertFromProtobuf(
      api.{{ state.proto.name }}.methods.{{ method.proto.name | to_lower_camel }}.response,
      response
    )
  );
  {% else %}
  return response;
  {% endif %}
};

const {{ state.proto.name }}{{ method.proto.name }}ResponseToProtobuf = (
  partialResponse?: {{ state.proto.name }}.Partial{{ method.proto.name }}Response
): {{ method.output_type }} => {
  return partialResponse instanceof {{ method.output_type }}
    ? partialResponse
    : new {{ method.output_type }}(
      {% if options.proto.zod %}
      reboot_api.convertToProtobufJson(
        api.{{ state.proto.name }}.methods.{{ method.proto.name | to_lower_camel }}.response,
        reboot_api.validate(
          "{{ state.proto.name }}.methods.{{ method.proto.name | to_lower_camel }}.response",
          api.{{ state.proto.name }}.methods.{{ method.proto.name | to_lower_camel }}.response,
          partialResponse
        )
      )
      {% else %}
      partialResponse
      {% endif %}
    );
};

{% endfor %}
{% endfor %}
{% endfor %}

{% for client in clients %}

{% for service in client.services %}
{% for method in service.methods %}
export namespace {{ client.proto.state_name }} {
  export type {{ method.proto.name }}Request =
  {% if options.proto.zod %}
  z.infer<
    reboot_api.EnsureZodObject<
      typeof api.{{ client.proto.state_name }}.{{ method.proto.name | to_lower_camel }}.request
      >
    >;
  {% else %}
    {{ method.input_type }};
  {% endif %}

  export type Partial{{ method.proto.name }}Request =
  {% if options.proto.zod %}
  {{ method.proto.name }}Request;
  {% else %}
  protobuf_es.PartialMessage<{{ method.input_type }}>;
  {% endif %}

  export type {{ method.proto.name }}Response =
  {% if options.proto.zod %}
  z.infer<
    reboot_api.EnsureZodObject<
      typeof api.{{ client.proto.state_name }}.{{ method.proto.name | to_lower_camel }}.response
      >
    >;
  {% else %}
    {{ method.output_type }};
  {% endif %}

  export type Partial{{ method.proto.name }}Response =
  {% if options.proto.zod %}
  {{ method.proto.name }}Response;
  {% else %}
  protobuf_es.PartialMessage<{{ method.output_type }}>;
  {% endif %}
}
{% endfor %}
{% endfor %}

{# TODO: do not generate errors in react, nodejs, and web. #}
{% for service in client.services %}
{% for method in service.methods %}

{% if options.proto.zod %}
{% if method.options.errors | length != 0 %}
const {{ client.proto.state_name }}{{ method.proto.name }}ErrorsSchema: typeof api.{{ client.proto.state_name }}.methods.{{ method.proto.name | to_lower_camel }}.errors extends z.ZodDiscriminatedUnion ? typeof api.{{ client.proto.state_name }}.methods.{{ method.proto.name | to_lower_camel }}.errors : ReturnType<typeof z.discriminatedUnion<typeof api.{{ client.proto.state_name }}.methods.{{ method.proto.name | to_lower_camel }}.errors>> =
  api.{{ client.proto.state_name }}.methods.{{ method.proto.name | to_lower_camel }}.errors instanceof z.ZodDiscriminatedUnion
    ? api.{{ client.proto.state_name }}.methods.{{ method.proto.name | to_lower_camel }}.errors
    // In order to types to properly be exposed
    // 'api.{{ client.proto.state_name }}.methods.{{ method.proto.name | to_lower_camel }}.errors' must be defined with `as const`.
    //
    // TODO: eliminate this requirement for developers by indexing
    // all of the errors in the code generation since we can determine
    // how many there are.
    : z.discriminatedUnion("type", api.{{ client.proto.state_name }}.methods.{{ method.proto.name | to_lower_camel }}.errors);
{% endif %}
{% endif %}

const {{ client.proto.state_name | to_screaming_snake }}_{{ method.proto.name | to_screaming_snake }}_ERROR_TYPES = [
  ...ERROR_TYPES,

  // Method errors.
  {% for type in method.options.errors.values() %}
  {{ type }},
  {% endfor %}
] as const; // Need `as const` to ensure TypeScript infers this as a tuple!

export type {{ client.proto.state_name | to_camel }}{{ method.proto.name | to_camel }}AbortedError =
  reboot_api.InstanceTypeForErrorTypes<
    typeof {{ client.proto.state_name | to_screaming_snake }}_{{ method.proto.name | to_screaming_snake }}_ERROR_TYPES
  >[number];

export class {{ client.proto.state_name | to_camel }}{{ method.proto.name | to_camel }}Aborted extends reboot_api.Aborted {
  static fromStatus(status: reboot_api.Status) {
    let error = reboot_api.errorFromGoogleRpcStatusDetails(
      status,
      {{ client.proto.state_name | to_screaming_snake }}_{{ method.proto.name | to_screaming_snake }}_ERROR_TYPES,
    );

    if (error !== undefined) {
      return new {{ client.proto.state_name | to_camel }}{{ method.proto.name | to_camel }}Aborted(
        error, { message: status.message }
      );
    }

    error = reboot_api.errorFromGoogleRpcStatusCode(status);

    // TODO(benh): also consider getting the type names from
    // `status.details` and including that in `message` to make
    // debugging easier.

    return new {{ client.proto.state_name | to_camel }}{{ method.proto.name | to_camel }}Aborted(
      error, { message: status.message }
    );
  }

  public toStatus(): reboot_api.Status {
    const isObject = (value: unknown): value is object => {
      return typeof value === 'object';
    };

    const isArray = (value: unknown): value is any[]  => {
      return Array.isArray(value);
    };

    const error = this.#error.toJson();

    if (!isObject(error) || isArray(error)) {
      throw new Error("Expecting 'error' to be an object (and not an array)");
    }

    const detail = { ...error };
    detail["@type"] = `type.googleapis.com/${this.#error.getType().typeName}`;

    return new reboot_api.Status({
      code: this.code,
      message: this.#message,
      details: [detail]
    });
  }

  constructor(
    error: {{ client.proto.state_name | to_camel }}{{ method.proto.name | to_camel }}AbortedError{% if options.proto.zod %}{% if method.options.errors | length != 0 %} | z.infer<typeof {{ client.proto.state_name }}{{ method.proto.name }}ErrorsSchema>{% endif %} | z.infer<typeof reboot_api.ZOD_ERRORS>{% endif %},
    { message }: { message?: string } = {}
  ) {
    super();

    // Set the name of this error for even more information!
    this.name = this.constructor.name;

    {% if options.proto.zod %}
    if (error instanceof protobuf_es.Message) {
      this.#error = error;
    } else if (!("type" in error)) {
      throw new Error("Expecting discriminator 'type' in error");
    } else if (reboot_api.ZOD_ERROR_NAMES.includes(error.type)) {
      this.#error = reboot_api.errorFromZodError(error);
    } else {
      {% if method.options.errors | length != 0 %}
      this.#error = {{ pb_name }}.{{ client.proto.state_name }}{{ method.proto.name }}Errors.fromJson(
        reboot_api.convertToProtobufJson(
          {{ client.proto.state_name }}{{ method.proto.name }}ErrorsSchema,
          reboot_api.validate(
            "api.{{ client.proto.state_name }}.methods.{{ method.proto.name | to_lower_camel }}.errors",
            {{ client.proto.state_name }}{{ method.proto.name }}ErrorsSchema,
            error
          )
        )
      );
      {% else %}
      throw new Error(`Unknown 'type' discriminator '${error.type}' in error`);
      {% endif %}
    }
    {% else %}
    this.#error = error;
    {% endif %}

    let code = reboot_api.grpcStatusCodeFromError(this.#error);

    if (code === undefined) {
      // Must be one of the Reboot specific errors.
      code = reboot_api.StatusCode.ABORTED;
    }

    this.code = code;

    this.#message = message;
  }

  toString(): string {
    return `${this.name}: ${this.message}`;
  }

  get message(): string {
    return `${this.#error.getType().typeName}${this.#message ? ": " + this.#message : ""}`;
  }

  get error(){% if options.proto.zod %}: {% if method.options.errors | length != 0 %}z.infer<typeof {{ client.proto.state_name }}{{ method.proto.name }}ErrorsSchema> | {% endif %}z.infer<typeof reboot_api.ZOD_ERRORS>{% endif %} {
    reboot_api.assert(this.#error instanceof protobuf_es.Message);
    {% if options.proto.zod %}
    {% if method.options.errors | length != 0 %}
    if (this.#error instanceof {{ pb_name }}.{{ client.proto.state_name }}{{ method.proto.name }}Errors) {
      return reboot_api.convertFromProtobuf(
        {{ client.proto.state_name }}{{ method.proto.name }}ErrorsSchema,
        this.#error
      );
    }
    {% else %}
    return reboot_api.zodErrorFromError(this.#error);
    {% endif %}
    {% else %}
    return this.#error;
    {% endif %}
  }

  readonly #error: {{ client.proto.state_name | to_camel }}{{ method.proto.name | to_camel }}AbortedError;
  readonly code: reboot_api.StatusCode;
  readonly #message?: string;
}

{% endfor %}
{% endfor %}

class _Reactively {
  #id: string;
  #state: string;

  constructor(id: string, options?: reboot_api.CallOptions) {
    this.#id = id;
    this.#state = "{{ client.proto.state_full_name }}";
  }

  {% for service in client.services %}
  {% for method in service.methods %}
  {% if method.options.proto.kind == 'reader' %}
  async {{ method.proto.name | to_lower_camel }}(
    context: reboot_web.WebContext,
    partialRequest?: {{ client.proto.state_name }}.Partial{{ method.proto.name }}Request,
    options?: { signal?: AbortSignal },
  ): Promise<[
      AsyncGenerator<{{ client.proto.state_name }}.{{ method.proto.name }}Response, void, unknown>,
      (newRequest: {{ client.proto.state_name }}.Partial{{ method.proto.name }}Request) => void
    ]> {
    const request = {{ client.proto.state_name }}{{ method.proto.name }}RequestToProtobuf(partialRequest);

    const [generator, setRequest] = reboot_web.reactively(
      {
        url: context.url,
        state: this.#state,
        method: "{{ method.proto.name }}",
        id: this.#id,
        requestType: {{ method.input_type }},
        responseType: {{ method.output_type }},
        request: request,
        signal: options?.signal,
        bearerToken: context.bearerToken,
      }
    );

    const setTypedRequest = (newRequest: {{ client.proto.state_name }}.Partial{{ method.proto.name }}Request): void => {
      const typedRequest = {{ client.proto.state_name }}{{ method.proto.name }}RequestToProtobuf(newRequest);
      setRequest(typedRequest);
    };

    async function* typedGenerator(): AsyncGenerator<{{ client.proto.state_name }}.{{ method.proto.name }}Response, void, unknown> {
     for await (const response of generator) {
      const typedResponse = {{ client.proto.state_name }}{{ method.proto.name }}ResponseFromProtobufShape(response);
      yield typedResponse;
      }
    };

    return [typedGenerator(), setTypedRequest];
  }

  {% endif %}
  {% endfor %}
  {% endfor %}
}

class _Idempotently {
  #stateRef: string;
  #idempotencyKey: string;

  constructor(id: string, idempotencyKey: string, options?: reboot_api.CallOptions) {
    this.#stateRef = reboot_api.stateIdToRef("{{ client.proto.state_full_name }}", id);
    this.#idempotencyKey = idempotencyKey;
  }

  {% for service in client.services %}
  {% for method in service.methods %}
  {% if method.options.proto.kind in [ 'writer', 'transaction' ] %}
  async {{ method.proto.name | to_lower_camel }}(
    context: reboot_web.WebContext,
    partialRequest?: {{ client.proto.state_name }}.Partial{{ method.proto.name }}Request,
    options?: { signal?: AbortSignal },
  ): Promise<{{ client.proto.state_name }}.{{ method.proto.name }}Response> {
    const request = {{ client.proto.state_name }}{{ method.proto.name }}RequestToProtobuf(partialRequest);

    const responseProtobuf = await reboot_web.httpCall(
      {
        url: context.url,
        method: "{{ proto.package_name }}.{{ service.proto.name }}/{{ method.proto.name }}",
        stateRef: this.#stateRef,
        requestType: {{ method.input_type }},
        responseType: {{ method.output_type }},
        abortedType: {{ client.proto.state_name | to_camel }}{{ method.proto.name | to_camel }}Aborted,
        request: request,
        options: options,
        bearerToken: context.bearerToken,
        idempotencyKey: this.#idempotencyKey,
      });

    return {{ client.proto.state_name }}{{ method.proto.name }}ResponseFromProtobufShape(responseProtobuf);
  }

  {% endif %}
  {% endfor %}
  {% endfor %}
}

export class {{ client.proto.state_name }}WeakReference {
  #id: string;
  #options?: reboot_api.CallOptions;

  constructor(id: string) {
    this.#id = id;
  }

  get stateId(): string {
    return this.#id;
  }

  public reactively() {
    return new _Reactively(
      this.#id,
    );
  }

  public idempotently({ key }: { key: string }) {
    return new _Idempotently(
      this.#id,
      key,
    );
  }

  {% for service in client.services %}
  {% for method in service.methods %}

  {% if method.options.proto.kind == 'workflow' %}
  {# TODO: implement `workflow` methods. #}
  {% elif method.options.proto.kind in ['reader', 'writer', 'transaction'] %}
  async {% if method.options.proto.constructor %}_{% endif %}{{ method.proto.name | to_lower_camel }}(
    context: reboot_web.WebContext,
    partialRequest?: {{ client.proto.state_name }}.Partial{{ method.proto.name }}Request,
    options?: { signal?: AbortSignal, from_constructor?: boolean },
  ): Promise<{{ client.proto.state_name }}.{{ method.proto.name }}Response> {
    {% if method.options.proto.constructor %}
    if (!options || !options.from_constructor) {
      throw new Error(
        `Method '{{ method.proto.name }}' is a constructor, so it can not be called on a weak reference.`
      );
    }
    {% endif %}

    const request = {{ client.proto.state_name }}{{ method.proto.name }}RequestToProtobuf(partialRequest);

    const stateRef = reboot_api.stateIdToRef(
      "{{ client.proto.state_full_name }}",
      this.#id,
    );
    const idempotencyKey = uuidv4();

    const protobufResponse = await reboot_web.httpCall(
      {
        url: context.url,
        method: "{{ proto.package_name }}.{{ service.proto.name }}/{{ method.proto.name }}",
        stateRef: stateRef,
        requestType: {{ method.input_type }},
        responseType: {{ method.output_type }},
        abortedType: {{ client.proto.state_name | to_camel }}{{ method.proto.name | to_camel }}Aborted,
        request: request,
        options: options,
        bearerToken: context.bearerToken,
        idempotencyKey: idempotencyKey,
      });

    return {{ client.proto.state_name }}{{ method.proto.name }}ResponseFromProtobufShape(protobufResponse);
  }

  {% endif %}
  {% endfor %}
  {% endfor %}
}

export class {{ client.proto.state_name }} {

  static WeakReference = {{ client.proto.state_name }}WeakReference;

  public static ref(
    id: string,
    options?: { bearerToken?: string }
  ) {
    return new {{ client.proto.state_name }}.WeakReference(id, options?.bearerToken);
  }

  {% for service in client.services %}
  {% for method in service.methods %}
  {%- if method.options.proto.kind == 'workflow' %}
  {# TODO(benh): support "tasks" and workflows. #}
  {% elif method.options.proto.constructor %}
  public static async {{ method.proto.name | to_lower_camel }}(
    context: reboot_web.WebContext,
    idOrPartialRequest?: string | {{ client.proto.state_name }}.Partial{{ method.proto.name }}Request,
    inputPartialRequest?: {{ client.proto.state_name }}.Partial{{ method.proto.name }}Request,
    options?: { signal?: AbortSignal }
  ): Promise<[
    {{ client.proto.state_name }}.WeakReference,
    {{ client.proto.state_name }}.{{ method.proto.name }}Response
  ]> {
    let id: string | undefined = undefined;
    let partialRequest: {{ client.proto.state_name }}.Partial{{ method.proto.name }}Request | undefined = undefined;

    if (typeof idOrPartialRequest === "string" || idOrPartialRequest instanceof String) {
      id = idOrPartialRequest;
      partialRequest = inputPartialRequest;
    } else {
      partialRequest = idOrPartialRequest;
    }

    if (id === undefined) {
      id = uuidv4();
    }

    const weakReference = {{ client.proto.state_name }}.ref(id);

    options = {
      "from_constructor": true,
      ...options,
    }

    const response = await weakReference._{{ method.proto.name | to_lower_camel }}(
      context,
      partialRequest,
      options,
    );

    return [weakReference, response];
  }
  {% endif %}
  {% endfor %}
  {% endfor %}


}

export namespace {{ client.proto.state_name }} {
  export type WeakReference = typeof {{ client.proto.state_name }}.WeakReference.prototype;
}

{% endfor %}
