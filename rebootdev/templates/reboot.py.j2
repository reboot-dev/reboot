# yapf: disable
# isort: skip_file
# ruff: noqa

# To not generate code where imported names might get shadowed when a user
# specifies some name in their proto file to be the same as one of our imported
# names, (for example: a request field named `uuid`) we bind all imports to
# names that are forbidden in 'proto' and therefore can never collide.

# Standard imports.
from __future__ import annotations as IMPORT_future_annotations

# The following MUST appear before the rest of the imports, since those imports
# may be invalid (broken) if the generated code is mismatched with the installed
# libraries.
import rebootdev.versioning as IMPORT_reboot_versioning
IMPORT_reboot_versioning.check_generated_code_compatible("{{ reboot_version }}")

# ATTENTION: no types in this file should be imported with their unqualified
#            name (e.g. `from typing import Any`). That would cause clashes
#            with user-defined methods that have the same name. Use
#            fully-qualified names (e.g. `IMPORT_typing.Any`) instead.
import asyncio as IMPORT_asyncio
import dataclasses as IMPORT_dataclasses
import google.protobuf.descriptor as IMPORT_google_protobuf_descriptor
import google.protobuf.json_format as IMPORT_google_protobuf_json_format
import google.protobuf.message as IMPORT_google_protobuf_message
import grpc as IMPORT_grpc
import grpc_status._async as IMPORT_rpc_status_async
from grpc_status import rpc_status as IMPORT_rpc_status_sync
import json as IMPORT_json
import os as IMPORT_os
import traceback as IMPORT_traceback
import uuid as IMPORT_uuid
import pickle as IMPORT_pickle
import rebootdev as IMPORT_rebootdev
import log.log as IMPORT_log_log   # type: ignore[import]
import typing as IMPORT_typing
import rebootdev.aio.backoff as IMPORT_reboot_aio_backoff
import functools as IMPORT_functools
from abc import abstractmethod as IMPORT_abc_abstractmethod
from datetime import datetime as IMPORT_datetime_datetime
from datetime import timedelta as IMPORT_datetime_timedelta
from datetime import timezone as IMPORT_datetime_timezone
from google.protobuf import timestamp_pb2 as IMPORT_google_protobuf_timestamp_pb2
from google.protobuf import wrappers_pb2 as IMPORT_google_protobuf_wrappers_pb2
import rebootdev.aio.tracing as IMPORT_reboot_aio_tracing
from google.rpc import status_pb2 as IMPORT_google_rpc_status_pb2
from tzlocal import get_localzone as IMPORT_tzlocal_get_localzone
import rebootdev.aio.call as IMPORT_reboot_aio_call
import rebootdev.aio.contexts as IMPORT_reboot_aio_contexts
import rebootdev.aio.headers as IMPORT_reboot_aio_headers
import rebootdev.aio.idempotency as IMPORT_reboot_aio_idempotency
import rebootdev.aio.internals.channel_manager as IMPORT_reboot_aio_internals_channel_manager
import rebootdev.aio.internals.middleware as IMPORT_reboot_aio_internals_middleware
import rebootdev.aio.internals.tasks_cache as IMPORT_reboot_aio_internals_tasks_cache
import rebootdev.aio.internals.tasks_dispatcher as IMPORT_reboot_aio_internals_tasks_dispatcher
import rebootdev.aio.placement as IMPORT_reboot_aio_placement
import rebootdev.aio.servicers as IMPORT_reboot_aio_servicers
import rebootdev.aio.state_managers as IMPORT_reboot_aio_state_managers
import rebootdev.aio.stubs as IMPORT_reboot_aio_stubs
import rebootdev.aio.tasks as IMPORT_reboot_aio_tasks
import rebootdev.aio.types as IMPORT_reboot_aio_types
import rebootdev.aio.external as IMPORT_reboot_aio_external
import rebootdev.settings as IMPORT_reboot_settings
import rebootdev.nodejs.python as IMPORT_reboot_nodejs_python
from rebootdev.time import DateTimeWithTimeZone as IMPORT_reboot_time_DateTimeWithTimeZone
import rbt.v1alpha1 as IMPORT_rbt_v1alpha1
import google.protobuf.any_pb2 as IMPORT_google_protobuf_any_pb2

{% if imports | length > 0 %}
# User defined or referenced imports.
{% for module in imports | sort %}
import {{ module }}
{% endfor %}
{% endif %}
{% if proto.messages_and_enums | length > 0 %}
# Additionally re-export all messages and enums from the pb2 module.
from {{ pb2_name }} import (
{% for message in proto.messages_and_enums | unique | sort %}
    {{ message }},
{% endfor %}
)
{% endif %}

logger = IMPORT_log_log.get_logger(__name__)


############################ Legacy gRPC Servicers ############################
# This section is relevant (only) for servicers that implement a legacy gRPC
# service in a Reboot context. It is irrelevant to clients.

def MakeLegacyGrpcServiceable(
    # A legacy gRPC servicer type can't be more specific than `type`,
    # because legacy gRPC servicers (as generated by the gRPC `protoc`
    # plugin) do not share any common base class other than `object`.
    servicer_type: type
) -> IMPORT_reboot_aio_servicers.Serviceable:
    {% for legacy_grpc_service in legacy_grpc_services %}
    if issubclass(servicer_type, {{ legacy_grpc_service.pb2_grpc_name }}.{{ legacy_grpc_service.proto.name }}Servicer):
        return {{ legacy_grpc_service.proto.name }}Serviceable(servicer_type)
    {% endfor %}
    raise ValueError(f"Unknown legacy gRPC servicer type '{servicer_type}'")


{% for legacy_grpc_service in legacy_grpc_services %}
class {{ legacy_grpc_service.proto.name }}Serviceable(IMPORT_reboot_aio_servicers.Serviceable):
    """ A Servicable that makes it possible to host a legacy gRPC
    `{{ legacy_grpc_service.proto.name }}Servicer` on Reboot."""

    def __init__(self, legacy_grpc_servicer_type: type[{{ legacy_grpc_service.pb2_grpc_name }}.{{ legacy_grpc_service.proto.name }}Servicer]):
        self._legacy_grpc_servicer_type = legacy_grpc_servicer_type

    def service_names(self) -> list[IMPORT_reboot_aio_types.ServiceName]:
        return [IMPORT_reboot_aio_types.ServiceName('{{ proto.package_name }}.{{ legacy_grpc_service.proto.name }}')]

    def state_type_name(self) -> None:
        # Legacy gRPC servicers don't have an associated state type.
        return None

    def file_descriptor(self) -> IMPORT_google_protobuf_descriptor.FileDescriptor:
        return {{ pb2_name }}.DESCRIPTOR

    def instantiate(self) -> tuple[
        {{ legacy_grpc_service.pb2_grpc_name }}.{{ legacy_grpc_service.proto.name }}Servicer,
        IMPORT_typing.Optional[IMPORT_typing.Callable[
            [object, IMPORT_grpc.aio.Server],
            None
        ]]
    ]:
        servicer = self._legacy_grpc_servicer_type()
        add_to_server_method = {{ legacy_grpc_service.pb2_grpc_name }}.add_{{ legacy_grpc_service.proto.name }}Servicer_to_server
        return servicer, add_to_server_method

{% endfor %}

############################ Reboot Servicer Middlewares ############################
# This section is relevant (only) for servicers implementing a Reboot servicer. It
# is irrelevant to clients, except for the fact that some clients are _also_ such
# servicers.

# For internal calls, we can use a magic token to bypass token verification and
# authorization checks. The token provides no auth information (e.g.,
# `context.auth is None`).
__internal_magic_token__: str = f'internal-{str(IMPORT_uuid.uuid4())}'

{% for state in states %}
class {{ state.proto.name }}ServicerMiddleware(IMPORT_reboot_aio_internals_middleware.Middleware):

    def __init__(
        self,
        *,
        servicer: {{ state.proto.name }}Servicer,
        application_id: IMPORT_reboot_aio_types.ApplicationId,
        consensus_id: IMPORT_reboot_aio_types.ConsensusId,
        state_manager: IMPORT_reboot_aio_state_managers.StateManager,
        placement_client: IMPORT_reboot_aio_placement.PlacementClient,
        channel_manager: IMPORT_reboot_aio_internals_channel_manager._ChannelManager,
        tasks_cache: IMPORT_reboot_aio_internals_tasks_cache.TasksCache,
        token_verifier: IMPORT_typing.Optional[IMPORT_rebootdev.aio.auth.token_verifiers.TokenVerifier],
        effect_validation: IMPORT_reboot_aio_contexts.EffectValidation,
        app_internal_api_key_secret: str,
        ready: IMPORT_asyncio.Event,
    ):
        super().__init__(
            application_id=application_id,
            consensus_id=consensus_id,
            state_type_name = IMPORT_reboot_aio_types.StateTypeName('{{ state.proto.full_name }}'),
            service_names = [
                {% for service in state.services %}
                IMPORT_reboot_aio_types.ServiceName("{{ service.proto.full_name }}"),
                {% endfor %}
            ],
            placement_client=placement_client,
            channel_manager=channel_manager,
            effect_validation=effect_validation,
            app_internal_api_key_secret=app_internal_api_key_secret,
        )

        self._servicer = servicer
        self._state_manager = state_manager
        self.tasks_dispatcher = IMPORT_reboot_aio_internals_tasks_dispatcher.TasksDispatcher(
            application_id=application_id,
            dispatch=self.dispatch,
            tasks_cache=tasks_cache,
            ready=ready,
        )

        # Store the type of each method's request so that stored requests can be
        # deserialized into the correct type.
        self.request_type_by_method_name: dict[str, type[IMPORT_google_protobuf_message.Message]] = {
            {% for service in state.services %}
            {% for method in service.methods %}
            '{{ method.proto.name }}': {{ method.input_type }},
            {% endfor %}
            {% endfor %}
        }

        # Get authorizer, if any, converting from a rule if necessary.
        def convert_authorizer_rule_if_necessary(
            authorizer_or_rule: IMPORT_typing.Optional[
                IMPORT_rebootdev.aio.auth.authorizers.Authorizer | IMPORT_rebootdev.aio.auth.authorizers.AuthorizerRule
            ]
        ) -> IMPORT_rebootdev.aio.auth.authorizers.Authorizer:

            # If no authorizer or rule is provided, return the default
            # authorizer which allows if app internal or allows if in
            # dev mode (and logs some warnings to help the user
            # realize where they are missing authorization).
            if authorizer_or_rule is None:
                return IMPORT_rebootdev.aio.auth.authorizers.DefaultAuthorizer(
                    '{{ state.proto.name }}'
                )

            if isinstance(authorizer_or_rule, IMPORT_rebootdev.aio.auth.authorizers.AuthorizerRule):
                return {{ state.proto.name }}Authorizer(
                    _default=authorizer_or_rule
                )

            return authorizer_or_rule

        self._authorizer = convert_authorizer_rule_if_necessary(
            servicer.authorizer()
        )

        # Create token verifier.
        self._token_verifier: IMPORT_typing.Optional[IMPORT_rebootdev.aio.auth.token_verifiers.TokenVerifier] = (
            servicer.token_verifier() or token_verifier
        )

        # Since users specify errors as proto messages they can't raise them
        # directly - to do so they have to use the `Aborted` wrapper, which will
        # hold the original proto message. On errors we'll need to check whether
        # such wrappers hold a proto message for a specified error, so we can
        # avoid retrying tasks that complete with a specified error.
        self._specified_errors_by_service_method_name: dict[str, list[str]] = {
            {% for service in state.services %}
            {% for method in service.methods %}
            {% if method.options.errors|length > 0 %}
            '{{ method.proto.full_name }}': [
                {% for type in method.options.errors.values() %}
                '{{ type }}',
                {% endfor %}
            ],
            {% endif %}
            {% endfor %}
            {% endfor %}
        }


    def add_to_server(self, server: IMPORT_grpc.aio.Server) -> None:
        {% for service in state.services %}
        {{ service.pb2_grpc_name }}.add_{{ service.proto.name }}Servicer_to_server(
            self, server
        )
        {% endfor %}

    async def inspect(self, state_ref: IMPORT_reboot_aio_types.StateRef) -> IMPORT_typing.AsyncIterator[IMPORT_google_protobuf_message.Message]:
        """Implementation of `Middleware.inspect()`."""
        context = self.create_context(
            headers=IMPORT_reboot_aio_headers.Headers(
                application_id=self.application_id,
                state_ref=state_ref,
            ),
            state_type_name = IMPORT_reboot_aio_types.StateTypeName('{{ state.proto.full_name }}'),
            context_type=IMPORT_reboot_aio_contexts.ReaderContext,
        )

        async with self._state_manager.streaming_reader_idempotency_key(
            context,
            self._servicer.__state_type__,
            authorize=None,
        ) as states:
            async for (state, idempotency_key) in states:
                yield state

    async def react_query(
        self,
        headers: IMPORT_reboot_aio_headers.Headers,
        method: str,
        request_bytes: bytes,
    ) -> IMPORT_typing.AsyncIterator[tuple[IMPORT_typing.Optional[IMPORT_google_protobuf_message.Message], list[IMPORT_uuid.UUID]]]:
        """Returns the response of calling 'method' given a message
        deserialized from the provided 'request_bytes' for each state
        update that creates a different response.

        # The caller (react.py) should have already ensured that this consensus
        # is authoritative for this traffic.
        assert self.placement_client.consensus_for_actor(
            headers.application_id,
            headers.state_ref,
        ) == self._consensus_id

        NOTE: only unary reader methods are supported."""
        {# NOTE: need to use 'namespace' so we can update it within the loop. #}
        {%- set ns = namespace(first_method=True) -%}
        {%- for service in state.services -%}
        {%- for method in service.methods -%}
        {%- if ns.first_method -%}
        {% set ns.first_method = False %}
        # Need to define these up here since we can only do that once.
        last_response: IMPORT_typing.Optional[IMPORT_google_protobuf_message.Message] = None
        aggregated_idempotency_keys: list[IMPORT_uuid.UUID] = []
        if method == '{{ method.proto.name }}':
        {% else %}
        elif method == '{{ method.proto.name }}':
        {% endif %}
            {% if (method.options.proto.kind == 'reader' and
                   not method.proto.server_streaming and
                   not method.proto.client_streaming and
                   not method.options.proto.state_streaming) %}

            context = self.create_context(
                headers=headers,
                state_type_name = IMPORT_reboot_aio_types.StateTypeName('{{ proto.package_name }}.{{ service.options.proto.state_name }}'),
                context_type=IMPORT_reboot_aio_contexts.ReaderContext,
            )

            context.auth = await self._maybe_verify_token(headers)

            request = {{ method.input_type }}()
            request.ParseFromString(request_bytes)

            async with self._state_manager.reactively(
                context,
                self._servicer.__state_type__,
                authorize=self._maybe_authorize(
                    method_name='{{ method.proto.full_name }}',
                    headers=headers,
                    auth=context.auth,
                    request=request,
                ),
            ) as states:
                async for (state, idempotency_keys) in states:

                    aggregated_idempotency_keys.extend(idempotency_keys)

                    # Note: This does not do any defensive copying currently:
                    # see https://github.com/reboot-dev/respect/issues/2636.
                    @IMPORT_reboot_aio_internals_middleware.maybe_run_function_twice_to_validate_effects
                    async def run__{{ method.proto.name }}(validating_effects: bool) -> IMPORT_google_protobuf_message.Message:
                        return await self.__{{ method.proto.name }}(
                            context,
                            state,
                            request,
                            validating_effects=validating_effects,
                        )

                    response = await run__{{ method.proto.name }}()

                    if last_response != response:
                        yield (response, aggregated_idempotency_keys)
                        last_response = response
                    else:
                        yield (None, aggregated_idempotency_keys)

                    aggregated_idempotency_keys.clear()
            {% else %}
            # Invariant here is that users should not have called this
            # directly but only through code generated React
            # components which should not have been generated except
            # for valid method candidates.
            logger.warning(
                "Got a React query request with an invalid method name: "
                f"Method '{method}' is invalid for servicer {{ state.proto.name }}."
                "\n"
                "Do you have a browser tab open for an older version "
                "of this application, or for a different application all together?"
            )
            raise IMPORT_rebootdev.aio.aborted.SystemAborted(
                IMPORT_rbt_v1alpha1.errors_pb2.InvalidMethod(),
                message=
                    f"Method '{method}' is invalid"
            )
            yield  # Necessary for type checking.
            {% endif %}
        {% endfor %}
        {% endfor %}
        {% if not ns.first_method %}
        else:
            logger.warning(
                "Got a React query request with an invalid method name: "
                f"Method '{method}' is invalid for servicer {{ state.proto.name }}."
                "\n"
                "Do you have a browser tab open for an older version "
                "of this application, or for a different application all together?"
            )
            raise IMPORT_rebootdev.aio.aborted.SystemAborted(
                IMPORT_rbt_v1alpha1.errors_pb2.InvalidMethod(),
                message=
                    f"Method '{method}' not found"
            )
            yield  # Unreachable but necessary for mypy.
        {% else  %}
        logger.warning(
            "Got a react query request with an invalid method name: "
            f"Method '{method}' is invalid for servicer {{ state.proto.name }}."
            "\n"
            "Do you have an old browser tab still open for an older version "
            "of this application, or a different application all together?"
        )
        raise IMPORT_rebootdev.aio.aborted.SystemAborted(
            IMPORT_rbt_v1alpha1.errors_pb2.InvalidMethod(),
            message=
                f"Method '{method}' not found"
        )
        yield  # Unreachable but necessary for mypy.
        {% endif  %}

    async def react_mutate(
        self,
        headers: IMPORT_reboot_aio_headers.Headers,
        method: str,
        request_bytes: bytes,
    ) -> IMPORT_google_protobuf_message.Message:
        """Returns the response of calling 'method' given a message
        deserialized from the provided 'request_bytes'."""
        {# NOTE: need to use 'namespace' so we can update it within the loop. #}
        {%- set ns = namespace(first_method=True) -%}
        {%- for service in state.services -%}
        {%- for method in service.methods -%}
        {%- if ns.first_method -%}
        {% set ns.first_method = False %}
        if method == '{{ method.proto.name }}':
        {% else %}
        elif method == '{{ method.proto.name }}':
        {% endif %}
            {% if method.options.proto.kind == 'workflow' %}
            raise IMPORT_rebootdev.aio.aborted.SystemAborted(
                IMPORT_rbt_v1alpha1.errors_pb2.InvalidMethod(),
                message=
                f"Method '{{ method.proto.name }}' can not be called via React (for now)"
            )
            {% elif method.options.proto.kind in ['writer', 'transaction'] %}
            request = {{ method.input_type }}()
            request.ParseFromString(request_bytes)

            # NOTE: we automatically retry mutations that come through
            # React when we get a `IMPORT_grpc.StatusCode.UNAVAILABLE` to
            # match the retry logic we do in the React code generated
            # to handle lack/loss of connectivity.
            #
            # TODO(benh): revisit this decision if we ever see reason
            # to call `react_mutate()` from any place other than where
            # we're executing React (e.g., browser, next.js server
            # component, etc).
            call_backoff = IMPORT_reboot_aio_backoff.Backoff()
            while True:
                # We make a full-fledged gRPC call, so that if this traffic
                # was misrouted (i.e. this consensus is not authoritative
                # for the state), it will now go to the right place. The
                # receiving middleware will handle things like effect
                # validation and so forth.
                assert headers.application_id is not None  # Guaranteed by `Headers`.
                stub = {{ service.pb2_grpc_name }}.{{ service.proto.name }}Stub(
                    self.channel_manager.get_channel_to(
                        self.placement_client.address_for_actor(
                            headers.application_id,
                            headers.state_ref,
                        )
                    )
                )
                call = stub.{{ method.proto.name }}(
                    request=request,
                    metadata=headers.to_grpc_metadata(),
                )
                try:
                    return await call
                except IMPORT_grpc.aio.AioRpcError as error:
                    if error.code() == IMPORT_grpc.StatusCode.UNAVAILABLE:
                        await call_backoff()
                        continue

                    # Reconstitute the error that the server threw, if it was a declared error.
                    status = await IMPORT_rpc_status_async.from_call(call)
                    if status is not None:
                        raise {{ state.proto.name }}.{{ method.proto.name }}Aborted.from_status(
                            status
                        ) from None
                    raise {{ state.proto.name }}.{{ method.proto.name }}Aborted.from_grpc_aio_rpc_error(
                        error
                     ) from None

            {% else %}{# method.options.proto.kind == 'reader' #}
            # Invariant here is that users should not have called this
            # directly but only through code generated React
            # components which should not have been generated except
            # for valid method candidates.
            logger.warning(
                "Got a react mutate request with an invalid method name: "
                "Method '{{ method.proto.name }}' is invalid for servicer {{ state.proto.name }}."
                "\n"
                "Do you have an old browser tab still open for an older version "
                "of this application, or a different application all together?"
            )
            raise IMPORT_rebootdev.aio.aborted.SystemAborted(
                IMPORT_rbt_v1alpha1.errors_pb2.InvalidMethod(),
                message=f"Method '{method}' is invalid"
            )
            {% endif %}
        {% endfor %}
        {% endfor %}
        {% if not ns.first_method %}
        else:
            logger.warning(
                "Got a react mutate request with an invalid method name: "
                f"Method '{method}' is invalid for servicer {{ state.proto.name }}."
                "\n"
                "Do you have an old browser tab still open for an older version "
                "of this application, or a different application all together?"
            )
            raise IMPORT_rebootdev.aio.aborted.SystemAborted(
                IMPORT_rbt_v1alpha1.errors_pb2.InvalidMethod(),
                message=
                    f"Method '{method}' not found"
            )
        {% else  %}
        logger.warning(
            "Got a react mutate request with an invalid method name: "
            f"Method '{method}' is invalid for servicer {{ state.proto.name }}."
            "\n"
            "Do you have an old browser tab still open for an older version "
            "of this application, or a different application all together?"
        )
        raise IMPORT_rebootdev.aio.aborted.SystemAborted(
            IMPORT_rbt_v1alpha1.errors_pb2.InvalidMethod(),
            message=
                f"Method '{method}' not found"
        )
        {% endif  %}

    async def dispatch(
        self,
        task: IMPORT_reboot_aio_tasks.TaskEffect,
        *,
        only_validate: bool = False,
    ) -> IMPORT_reboot_aio_internals_tasks_dispatcher.TaskResponseOrError:
        """Dispatches the tasks to execute unless 'only_validate' is set to
        true, in which case just ensures that the task actually exists.
        Note that this function will be called *by* tasks_dispatcher; it will
        not itself call into tasks_dispatcher."""

        {# NOTE: need to use 'namespace' so we can update it within the loop. #}
        {%- for service in state.services -%}
        {%- for method in service.methods -%}
        {%- if not (method.proto.server_streaming or method.proto.client_streaming) %}
        {%- if loop.first %}
        if '{{ method.proto.name }}' == task.method_name:
        {% else %}
        elif '{{ method.proto.name }}' == task.method_name:
        {% endif %}
            if only_validate:
                # TODO(benh): validate 'task.request' is correct type.
                return {{ method.output_type }}()

            # Use an inline method to create a new scope, so that we can use
            # variable names like `context` and `effects` in multiple branches
            # in this code (notably when there are multiple task types) without
            # hitting a mypy error that the variable's type is not consistent.
            async def run_{{ method.proto.name }}(
                {% if method.options.proto.kind == 'workflow' %}
                validating_effects: bool,
                {% endif %}
                context: IMPORT_reboot_aio_contexts.WorkflowContext,
            ):
                async with self._state_manager.task_workflow(
                    context,
                ) as complete:
                    self.tasks_dispatcher.set_complete_task(complete)

                    try:
                        {% if method.options.proto.kind in ['reader', 'writer', 'transaction']:  %}
                        response = await ({{ state.proto.name }}WorkflowStub(
                            context=context,
                            state_ref=context._state_ref,
                        ).{{ method.proto.name }}(
                            IMPORT_typing.cast({{ method.input_type }}, task.request),
                            bearer_token=__internal_magic_token__,
                            {% if method.options.proto.kind in ['writer', 'transaction'] %}
                            idempotency=IMPORT_reboot_aio_idempotency.Idempotency(
                                alias=f'Task {task.task_id.task_uuid}',
                            ),
                            {% endif %}
                        ))

                        await complete(task, (response, None))
                        return (response, None)

                        {% elif method.options.proto.kind == 'workflow' %}
                        response_or_loop = await self.__{{ method.proto.name }}(
                            context,
                            IMPORT_typing.cast({{ method.input_type }}, task.request),
                            validating_effects=validating_effects,
                        )

                        # TODO: retrying a control loop might cause an effect
                        # validation retry to either "hang" or "do more
                        # work". It's not clear that this is always a bug, i.e.,
                        # the intent of effect validation for a `workflow` method
                        # is to ensure it can handle a failure and the developer
                        # might have written the code to handle failures and still
                        # run into the "hang" or "do more work" due to effect
                        # validation. So for now, we don't bother doing effect
                        # validation for loops since we'll be re-running it again.
                        if not isinstance(response_or_loop, IMPORT_reboot_aio_tasks.Loop):
                            assert (self._effect_validation == IMPORT_reboot_aio_contexts.EffectValidation.DISABLED) or (
                                validating_effects is True
                            ), f"Trying to complete a task without validating effects: {task.task_id.task_uuid}"

                        await complete(task, (response_or_loop, None))
                        return (response_or_loop, None)
                        {% endif %}
                    except IMPORT_asyncio.CancelledError:
                        # Check if the task was cancelled by a TasksServicer.
                        if self.tasks_dispatcher.is_task_cancelled(task.task_id.task_uuid):
                            # The running task was cancelled by a TasksServicer.
                            await complete(task, (None, IMPORT_rbt_v1alpha1.tasks_pb2.TaskCancelledError()))
                            return (None, IMPORT_rbt_v1alpha1.tasks_pb2.TaskCancelledError())
                        else:
                            raise
                    except IMPORT_rebootdev.aio.aborted.Aborted as aborted:
                        error_type = f'{aborted.error.__class__.__module__}.{aborted.error.__class__.__qualname__}'
                        # Do not retry a task if the error was specified in the
                        # proto file.
                        if error_type in self._specified_errors_by_service_method_name.get('{{ method.proto.full_name }}', []):
                            await complete(task, (None, aborted.error))
                            return (None, aborted.error)
                        raise

            {% if method.options.proto.kind == 'workflow' %}
            @IMPORT_reboot_aio_internals_middleware.maybe_run_function_twice_to_validate_effects
            async def run_{{ method.proto.name }}_reactively(
                validating_effects: bool,
                context: IMPORT_reboot_aio_contexts.WorkflowContext,
            ):
                async with self._state_manager.reactively(
                    context,
                    self._servicer.__state_type__,
                    # TODO: Currently, we only authorize at creation time of a
                    # task, but that violates our contract around re-authorizing
                    # for each new state value.
                    authorize=None,
                ) as states:
                    async for (state, idempotency_keys) in states:
                        try:
                            # When we're validating effects we
                            # periodically timeout so that we can log
                            # that a workflow might be hung, i.e., the
                            # user has a bug.
                            task = IMPORT_asyncio.create_task(
                                run_{{ method.proto.name }}(
                                    validating_effects, context
                                )
                            )
                            timeout = None if not validating_effects else 5  # seconds
                            while True:
                                done, pending = await IMPORT_asyncio.wait(
                                    [task],
                                    timeout=timeout,
                                )
                                # Check if we've timed out, which
                                # should only occur if we're
                                # validating effects.
                                if len(done) == 0:
                                    assert validating_effects and timeout is not None
                                    logger.warning(
                                        f'Still waiting for method {{ state.proto.name }}.{{ method.proto.name }} '
                                        'to complete after re-running to validate effects.'
                                    )
                                    timeout += 5  # seconds
                                    continue
                                return task.result()
                        except IMPORT_reboot_aio_contexts.RetryReactively:
                            continue
            {% endif %}

            return await run_{{ method.proto.name }}{% if method.options.proto.kind == 'workflow' %}_reactively{% endif %}(
                self.create_context(
                    headers=IMPORT_reboot_aio_headers.Headers(
                        application_id=self.application_id,
                        state_ref=IMPORT_reboot_aio_types.StateRef(task.task_id.state_ref),
                        {% if method.options.proto.kind == 'workflow' %}
                        workflow_id=IMPORT_uuid.UUID(bytes=task.task_id.task_uuid),
                        {% endif %}
                    ),
                    state_type_name = IMPORT_reboot_aio_types.StateTypeName('{{ proto.package_name }}.{{ service.options.proto.state_name }}'),
                    context_type=IMPORT_reboot_aio_contexts.WorkflowContext,
                    task=task,
                )
            )
        {% endif %}
        {% endfor %}
        {% endfor %}

        # There are no tasks for this service.
        start_or_validate = "start" if not only_validate else "validate"
        raise RuntimeError(
            f"Attempted to {start_or_validate} task '{task.method_name}' "
            f"on '{{ state.proto.name }}' which does not exist"
        )

    # {{ state.proto.name }} specific methods:
    {% for service in state.services %}
    {% for method in service.methods %}
    async def __{{ method.proto.name }}(
        self,
        context: IMPORT_reboot_aio_contexts.{{ method.options.proto.kind | to_camel }}Context,
        {% if not method.options.proto.kind == 'workflow' %}
        {% if not method.options.proto.state_streaming %}
        state: {{ state.pb2_name }}.{{ state.proto.name }},
        {% else %}
        states: IMPORT_typing.AsyncIterable[{{ state.pb2_name }}.{{ state.proto.name }}],
        {% endif %}
        {% endif %}
        {% if not method.proto.client_streaming %}
        request: {{ method.input_type }},
        {% else %}
        requests: IMPORT_typing.AsyncIterable[{{ method.input_type }}],
        {% endif %}
        *,
        validating_effects: bool,
    {% if method.options.proto.kind in ['reader', 'transaction', 'workflow'] %}
    {% if not method.proto.server_streaming %}
    ) -> {{ method.output_type }}{% if method.options.proto.kind == 'workflow' %} | IMPORT_reboot_aio_tasks.Loop{% endif %}:
    {% else %}
    ) -> IMPORT_typing.AsyncIterable[{{ method.output_type }}]:
    {% endif %}
    {% elif method.options.proto.kind == 'writer' %}
    ) -> {{ state.proto.name }}.{{ method.proto.name }}Effects:
    {% endif %}
        try:
            {% if not method.proto.server_streaming %}
            response = (
                await self._servicer.{{ method.proto.name }}(
                    context=context,
                    {% if not method.options.proto.kind == 'workflow' %}
                    state{% if method.options.proto.state_streaming %}s{% endif %}=state{% if method.options.proto.state_streaming %}s{% endif %},
                    {% endif %}
                    request{% if method.proto.client_streaming %}s{% endif %}=request{% if method.proto.client_streaming %}s{% endif +%}
                )
            )
            IMPORT_reboot_aio_types.assert_type(
                response,
                [
                    {{ method.output_type }},
                    {% if method.options.proto.kind == 'workflow' %}
                    IMPORT_reboot_aio_tasks.Loop,
                    {% endif %}
                ],
            )
            # TODO: retrying a control loop might cause an effect
            # validation retry to either "hang" or "do more
            # work". It's not clear that this is always a bug, i.e.,
            # the intent of effect validation for a `workflow` method
            # is to ensure it can handle a failure and the developer
            # might have written the code to handle failures and still
            # run into the "hang" or "do more work" due to effect
            # validation. So for now, we don't bother doing effect
            # validation for loops since we'll be re-running it again.
            if not isinstance(response, IMPORT_reboot_aio_tasks.Loop):
                self.maybe_raise_effect_validation_retry(
                    logger=logger,
                    idempotency_manager=context,
                    method_name='{{ state.proto.name }}.{{ method.proto.name }}',
                    validating_effects=validating_effects,
                    context=context,
                )
            {% if method.options.proto.kind == 'writer' %}
            return {{ state.proto.name }}.{{ method.proto.name }}Effects(
                state=state,
                response=response,
                tasks=context._tasks,
                _colocated_upserts=context._colocated_upserts,
            )
            {% else %}
            return response
            {% endif %}
            {% else %}
            async for response in self._servicer.{{ method.proto.name }}(
                context=context,
                state{% if method.options.proto.state_streaming %}s{% endif %}=state{% if method.options.proto.state_streaming %}s{% endif %},
                request{% if method.proto.client_streaming %}s{% endif %}=request{% if method.proto.client_streaming %}s{% endif +%}
            ):
                IMPORT_reboot_aio_types.assert_type(response, [{{ method.output_type }}])
                yield response
            {% endif %}
        except IMPORT_reboot_aio_contexts.RetryReactively:
            # Retrying reactively, just let this propagate.
            raise
        except IMPORT_reboot_aio_contexts.EffectValidationRetry:
            # Doing effect validation, just let this propagate.
            raise
        except IMPORT_rebootdev.aio.aborted.Aborted as aborted:
            # If the caller aborted due to a retryable error, just
            # propagate the aborted instead of propagating `Unknown`
            # so that a client can transparently retry.
            if IMPORT_rebootdev.aio.aborted.is_retryable(aborted):
                raise aborted
            # Log any _unhandled_ abort stack traces to make it
            # easier for debugging.
            #
            # NOTE: we don't log if we're a task as it will be logged
            # in `public/rebootdev/aio/internals/tasks_dispatcher.py` instead.
            aborted_type: IMPORT_typing.Optional[type] = None
            aborted_type = {{ state.proto.name }}.{{ method.proto.name }}Aborted
            if isinstance(aborted, IMPORT_rebootdev.aio.aborted.SystemAborted):
                # Not logging when within `node` as we already log there.
                if IMPORT_reboot_nodejs_python.should_print_stacktrace():
                    logger.warning(
                        f"Unhandled (in '{{ state.proto.full_name }}.{{ method.proto.name }}') {aborted}; propagating as 'Unknown'\n" +
                        ''.join(IMPORT_traceback.format_exception(aborted))
                    )
                raise IMPORT_rebootdev.aio.aborted.SystemAborted(
                    IMPORT_rbt_v1alpha1.errors_pb2.Unknown(),
                    # TODO(benh): consider whether or not we want to
                    # include the 'package.service.method' which may
                    # get concatenated together forming a kind of
                    # "stack trace"; while it's super helpful for
                    # debugging, it does expose implementation
                    # information.
                    message=f"unhandled (in '{{ state.proto.full_name }}.{{ method.proto.name }}') {aborted}"
                )
            else:
                if (
                    aborted_type is not None and
                    not isinstance(aborted, aborted_type) and
                    aborted_type.is_declared_error(aborted.error)
                ):
                    if context.task is None:
                        logger.warning(
                            f"Propagating unhandled (in '{{ state.proto.full_name }}.{{ method.proto.name }}') {aborted}"
                        )
                elif (
                    aborted_type is None or
                    not isinstance(aborted, aborted_type)
                ):
                    # Not logging when within `node` as we already log there.
                    if IMPORT_reboot_nodejs_python.should_print_stacktrace():
                        logger.warning(
                            f"Unhandled (in '{{ state.proto.full_name }}.{{ method.proto.name }}') {aborted}; propagating as 'Unknown'\n" +
                            ''.join(IMPORT_traceback.format_exception(aborted))
                        )
                    raise IMPORT_rebootdev.aio.aborted.SystemAborted(
                        IMPORT_rbt_v1alpha1.errors_pb2.Unknown(),
                        # TODO(benh): consider whether or not we want to
                        # include the 'package.service.method' which may
                        # get concatenated together forming a kind of
                        # "stack trace"; while it's super helpful for
                        # debugging, it does expose implementation
                        # information.
                        message=f"unhandled (in '{{ state.proto.full_name }}.{{ method.proto.name }}') {aborted}"
                    )

            raise
        except IMPORT_asyncio.CancelledError:
            # It's pretty normal for an RPC to be cancelled; it's not useful to
            # print a stack trace.
            raise
        except IMPORT_google_protobuf_message.DecodeError as decode_error:
            # We usually see this error when we are trying to construct a proto
            # message which is too deeply nested: protobuf has a limit of 100
            # nested messages. See the limits here:
            #   https://protobuf.dev/programming-guides/proto-limits/

            if IMPORT_reboot_nodejs_python.should_print_stacktrace():
                logger.warning(
                    f"Unhandled (in '{{ state.proto.full_name }}.{{ method.proto.name }}') {type(decode_error).__name__}: {decode_error}; " +
                    "This is usually caused by a deeply nested protobuf message, which is not supported by protobuf.\n"
                    "See the limits here: https://protobuf.dev/programming-guides/proto-limits/" +
                    ''.join(IMPORT_traceback.format_exception(decode_error))
                )
            raise IMPORT_rebootdev.aio.aborted.SystemAborted(
                IMPORT_rbt_v1alpha1.errors_pb2.Unknown(),
                message=f"unhandled (in '{{ state.proto.full_name }}.{{ method.proto.name }}') {decode_error}; "
                        "This is usually caused by a deeply nested protobuf message, which is not supported by protobuf.\n"
                        "See the limits here: https://protobuf.dev/programming-guides/proto-limits/"
            )
        except BaseException as exception:
            # Not logging when within `node` as we already log there.
            if IMPORT_reboot_nodejs_python.should_print_stacktrace():
                logger.warning(
                    f"Unhandled (in '{{ state.proto.full_name }}.{{ method.proto.name }}') {type(exception).__name__}: {exception}; propagating as 'Unknown'\n" +
                    ''.join(IMPORT_traceback.format_exception(exception))
                )
            raise IMPORT_rebootdev.aio.aborted.SystemAborted(
                IMPORT_rbt_v1alpha1.errors_pb2.Unknown(),
                # TODO(benh): consider whether or not we want to
                # include the 'package.service.method' which may
                # get concatenated together forming a kind of
                # "stack trace"; while it's super helpful for
                # debugging, it does expose implementation
                # information.
                message=f"unhandled (in '{{ state.proto.full_name }}.{{ method.proto.name }}') {type(exception).__name__}: {exception}"
            )

    {% if method.options.proto.kind != 'workflow' %}
    {% if not method.proto.server_streaming %}
    @IMPORT_reboot_aio_tracing.function_span(
        # We expect an `EffectValidationRetry` exception; that's not an error.
        set_status_on_exception=False
    )
    {% else %}
    @IMPORT_reboot_aio_tracing.generator_span(
        # We expect an `EffectValidationRetry` exception; that's not an error.
        set_status_on_exception=False
    )
    {% endif %}
    async def _{{ method.proto.name }}(
        self,
        {% if not method.proto.client_streaming %}
        request: {{ method.input_type }},
        {% else %}
        requests: IMPORT_typing.AsyncIterable[{{ method.input_type }}],
        {% endif %}
        context: IMPORT_reboot_aio_contexts.{{ method.options.proto.kind | to_camel }}Context,
        *,
        validating_effects: bool,
        grpc_context: IMPORT_typing.Optional[IMPORT_grpc.aio.ServicerContext] = None,
    {% if not method.proto.server_streaming %}
    ) -> {{ method.output_type }}:
    {% else %}
    ) -> IMPORT_typing.AsyncIterable[{{ method.output_type }}]:
    {% endif %}
        # Try to verify the token if a token verifier exists.
        context.auth = await self._maybe_verify_token(context._headers)

        {% if method.options.proto.kind in ['writer', 'transaction'] %}
        # Check if we already have performed this mutation!
        #
        # We do this _before_ calling 'transactionally()' because
        # if this call is for a transaction method _and_ we've
        # already performed the transaction then we don't want to
        # become a transaction participant (again) we just want to
        # return the transaction's response.
        idempotent_mutation = self._state_manager.check_for_idempotent_mutation(
            context
        )

        if idempotent_mutation is not None:
            response = {{ method.output_type }}()
            response.ParseFromString(idempotent_mutation.response)
            return response
        {% endif %}

        async with self._state_manager.transactionally(
            context, self.tasks_dispatcher
        ) as transaction:
            if transaction is not None:
                context.participants.add(
                    self._servicer.__state_type_name__, context._state_ref
                )
        {% if method.options.proto.kind == 'reader' %}
            authorizer = self._maybe_authorize(
                method_name='{{ method.proto.full_name }}',
                headers=context._headers,
                auth=context.auth,
                {% if not method.proto.client_streaming %}
                request=request,
                {% endif %}
            )
            {% if not method.options.proto.state_streaming %}
            async with self._state_manager.reader(
                context,
                self._servicer.__state_type__,
                authorize=authorizer,
            ) as state:
            {% else %}
            async with self._state_manager.streaming_reader(
                context,
                self._servicer.__state_type__,
                authorize=authorizer,
            ) as states:
            {% endif %}
                if transaction is not None:
                    # We need the transaction to be stored _before_ sending a
                    # response to the user; otherwise they may read two
                    # different states if we crash. Storing the transaction
                    # before even performing the read covers an edge-case:
                    # `StateManager.colocated_read()`, which may be called from
                    # this reader, will read from RocksDB, and will want to use
                    # the transaction.
                    await self._state_manager.transaction_participant_store(
                        transaction
                    )
                {% if not method.proto.server_streaming %}
                response = await self.__{{ method.proto.name }}(
                    context,
                    state{% if method.options.proto.state_streaming %}s{% endif %},
                    request{% if method.proto.client_streaming %}s{% endif +%},
                    validating_effects=validating_effects,
                )
                return response
                {% else %}
                async for response in self.__{{ method.proto.name }}(
                    context,
                    state{% if method.options.proto.state_streaming %}s{% endif %},
                    request{% if method.proto.client_streaming %}s{% endif +%},
                    validating_effects=True,
                ):
                    yield response
                {% endif %}
        {% elif method.options.proto.kind == 'writer' %}
            async with self._state_manager.writer(
                context,
                self._servicer.__state_type__,
                self.tasks_dispatcher,
                authorize=self._maybe_authorize(
                    method_name='{{ method.proto.full_name }}',
                    headers=context._headers,
                    auth=context.auth,
                    request=request,
                ),
                transaction=transaction,
                from_constructor={{ method.options.proto.constructor }},
                requires_constructor={{ service.proto.requires_constructor }},
            ) as (state, writer):

                effects = await self.__{{ method.proto.name }}(
                    context,
                    state,
                    request,
                    validating_effects=validating_effects,
                )

                await writer.complete(effects)

                # TODO: We need a single `Effects` superclass for all methods, so we
                # would need to make it "partially" generic (with per-method subclasses
                # filling out the rest of the generic parameters) in order to fix this.
                return effects.response  # type: ignore[return-value]
        {% elif method.options.proto.kind == 'transaction' %}
            assert transaction is not None
            async with self._state_manager.transaction(
                context,
                self._servicer.__state_type__,
                transaction,
                authorize=self._maybe_authorize(
                    method_name='{{ method.proto.full_name }}',
                    headers=context._headers,
                    auth=context.auth,
                    request=request,
                ),
                from_constructor={{ method.options.proto.constructor }},
                requires_constructor={{ service.proto.requires_constructor }}
            ) as (state, complete):

                response = await self.__{{ method.proto.name }}(
                    context,
                    state,
                    request,
                    validating_effects=validating_effects,
                )

                await complete(
                    IMPORT_reboot_aio_state_managers.Effects(
                        state=state,
                        response=response,
                    )
                )
                return response
        {% elif method.options.proto.kind == 'workflow' %}
        {# rebootdev.aio.contexts.WorkflowContexts are already omitted by the outer `if`. #}
        {% endif %}
    {% endif %}

    {% if not method.proto.server_streaming %}
    async def _schedule_{{ method.proto.name | to_camel }}(
        self,
        *,
        request: {{ method.input_type }},
        headers: IMPORT_reboot_aio_headers.Headers,
        grpc_context: IMPORT_grpc.aio.ServicerContext,
    ) -> tuple[IMPORT_reboot_aio_contexts.WriterContext, {{ method.output_type }}]:
        context: IMPORT_reboot_aio_contexts.WriterContext = self.create_context(
            headers=headers,
            state_type_name = IMPORT_reboot_aio_types.StateTypeName('{{ proto.package_name }}.{{ service.options.proto.state_name }}'),
            context_type=IMPORT_reboot_aio_contexts.WriterContext,
        )
        response = {{ method.output_type }}()

        {% if method.options.proto.kind in ['writer', 'transaction', 'workflow'] %}
        # Check if we already have performed this mutation!
        #
        # We do this _before_ calling 'transactionally()' because
        # if this call is for a transaction method _and_ we've
        # already performed the transaction then we don't want to
        # become a transaction participant (again) we just want to
        # return the transaction's response.
        idempotent_mutation = self._state_manager.check_for_idempotent_mutation(
            context
        )

        if idempotent_mutation is not None:
            response.ParseFromString(idempotent_mutation.response)

            # We should have only scheduled a single task!
            assert len(idempotent_mutation.task_ids) == 1
            assert grpc_context is not None
            grpc_context.set_trailing_metadata(
                grpc_context.trailing_metadata() +
                (
                    (
                        IMPORT_reboot_aio_headers.TASK_ID_UUID,
                        str(IMPORT_uuid.UUID(bytes=idempotent_mutation.task_ids[0].task_uuid))
                    ),
                )
            )

            return context, response
        {% endif %}

        async with self._state_manager.transactionally(
            context, self.tasks_dispatcher
        ) as transaction:
            if transaction is not None:
                context.participants.add(
                    self._servicer.__state_type_name__, context._state_ref
                )

            # Try to verify the token if a token verifier exists.
            context.auth = await self._maybe_verify_token(headers)

            async with self._state_manager.writer(
                context,
                self._servicer.__state_type__,
                self.tasks_dispatcher,
                transaction=transaction,
                authorize=self._maybe_authorize(
                    method_name='{{ method.proto.full_name }}',
                    headers=context._headers,
                    auth=context.auth,
                    request=request,
                ),
                from_constructor={{ method.options.proto.constructor }},
                requires_constructor={{ service.proto.requires_constructor }}
            ) as (state, writer):

                task = {{ state.proto.name }}ServicerTasksStub(
                    context=context,
                    state_ref=context._state_ref,
                ).{{ method.proto.name }}(
                    request,
                    schedule=context._headers.task_schedule,
                )

                effects = IMPORT_reboot_aio_state_managers.Effects(
                    response=response,
                    state=state,
                    tasks=[task],
                )

                assert effects.tasks is not None

                await writer.complete(effects)

                assert grpc_context is not None

                grpc_context.set_trailing_metadata(
                    grpc_context.trailing_metadata() +
                    (
                        (
                            IMPORT_reboot_aio_headers.TASK_ID_UUID,
                            str(IMPORT_uuid.UUID(bytes=task.task_id.task_uuid))
                        ),
                    )
                )

                return context, response

        return context, response


    # Entrypoint for non-reactive network calls (i.e. typical gRPC calls).
    {% endif %}
    async def {{ method.proto.name }}(
        self,
        {% if not method.proto.client_streaming %}
        request: {{ method.input_type }},
        {% else %}
        requests: IMPORT_typing.AsyncIterable[{{ method.input_type }}],
        {% endif %}
        grpc_context: IMPORT_grpc.aio.ServicerContext,
    {% if not method.proto.server_streaming %}
    ) -> {{ method.output_type }}:
    {% else %}
    ) -> IMPORT_typing.AsyncIterable[{{ method.output_type }}]:
    {% endif %}
        headers = IMPORT_reboot_aio_headers.Headers.from_grpc_context(grpc_context)
        assert headers.application_id is not None  # Guaranteed by `Headers`.

        # Confirm whether this is the right consensus to be serving this
        # request.
        authoritative_consensus = self.placement_client.consensus_for_actor(
            headers.application_id,
            headers.state_ref,
        )
        if authoritative_consensus != self.consensus_id:
            # This is NOT the correct consensus. Fail.
            await grpc_context.abort(
                IMPORT_grpc.StatusCode.UNAVAILABLE,
                f"Consensus '{self.consensus_id}' is not authoritative for this "
                f"request; consensus '{authoritative_consensus}' is.",
            )
            raise  # Unreachable but necessary for mypy.

        {% if not method.proto.server_streaming %}
        @IMPORT_reboot_aio_internals_middleware.maybe_run_function_twice_to_validate_effects
        {% endif %}
        async def _run(
            {% if not method.proto.server_streaming %}
            validating_effects: bool,
            {% endif %}
        {% if not method.proto.server_streaming %}
        ) -> {{ method.output_type }}:
        {% else %}
        ) -> IMPORT_typing.AsyncIterable[{{ method.output_type }}]:
        {% endif %}
            {% if not method.proto.server_streaming %}
            {% endif %}
            context: IMPORT_typing.Optional[IMPORT_reboot_aio_contexts.Context] = None
            try:
                {% if method.options.proto.kind == 'workflow' %}
                # rebootdev.aio.contexts.WorkflowContext must be scheduled!
                assert headers.task_schedule is not None
                {% endif %}
                {% if not (method.proto.server_streaming or method.proto.client_streaming) %}
                if headers.task_schedule is not None:
                    context, response = await self._schedule_{{ method.proto.name | to_camel }}(
                        headers=headers,
                        request=request,
                        grpc_context=grpc_context,
                    )
                    return response
                {% endif %}

                {% if method.options.proto.kind != 'workflow' %}
                context = self.create_context(
                    headers=headers,
                    state_type_name = IMPORT_reboot_aio_types.StateTypeName('{{ proto.package_name }}.{{ service.options.proto.state_name }}'),
                    context_type=IMPORT_reboot_aio_contexts.{{ method.options.proto.kind | to_camel }}Context,
                )
                assert context is not None

                {% if not method.proto.server_streaming %}
                return await self._{{ method.proto.name }}(
                    {% if not method.proto.client_streaming %}
                    request,
                    {% else %}
                    requests,
                    {% endif %}
                    context,
                    validating_effects=validating_effects,
                    grpc_context=grpc_context,
                )
                {% else %}
                async for response in self._{{ method.proto.name }}(
                    {% if not method.proto.client_streaming %}
                    request,
                    {% else %}
                    requests,
                    {% endif %}
                    context,
                    validating_effects=True,
                    grpc_context=grpc_context,
                ):
                    yield response
                {% endif %}
                {% endif %}
            except IMPORT_reboot_aio_contexts.EffectValidationRetry:
                # Doing effect validation, just let this propagate.
                raise
            except IMPORT_rebootdev.aio.aborted.Aborted as aborted:
                await grpc_context.abort_with_status(
                    IMPORT_rpc_status_sync.to_status(aborted.to_status())
                )
                raise  # Unreachable but necessary for mypy.
            except IMPORT_asyncio.CancelledError:
                # It's pretty normal for an RPC to be cancelled; it's not useful to
                # print a stack trace.
                raise
            except BaseException as exception:
                # Print the exception stack trace for easier debugging. Note
                # that we don't include the stack trace in an error message
                # for the same reason that gRPC doesn't do so by default,
                # see https://github.com/grpc/grpc/issues/14897, but since this
                # should only get logged on the server side it is safe.
                logger.warning(
                    'Unhandled exception\n' +
                    ''.join(IMPORT_traceback.format_exc() if IMPORT_reboot_nodejs_python.should_print_stacktrace() else [f"{type(exception).__name__}: {exception}"])
                )

                # Re-raise the exception for gRPC to handle!
                raise
            finally:
                if context is not None and context.transaction_id is not None:
                    # Propagate transaction participants.
                    grpc_context.set_trailing_metadata(
                        grpc_context.trailing_metadata() +
                        context.participants.to_grpc_metadata()
                    )

        {% if not method.proto.server_streaming %}
        return await _run()
        {% else %}
        async for response in _run():
            yield response
        {% endif %}

    {% endfor %}
    {% endfor %}
    def _maybe_authorize(
        self,
        *,
        method_name: str,
        headers: IMPORT_reboot_aio_headers.Headers,
        auth: IMPORT_typing.Optional[IMPORT_rebootdev.aio.auth.Auth],
        request: IMPORT_typing.Optional[{{ state.proto.name }}RequestTypes] = None,
    ) -> IMPORT_typing.Optional[IMPORT_typing.Callable[[IMPORT_typing.Optional[{{ state.proto.name }}StateType]], IMPORT_typing.Awaitable[None]]]:
        """Returns a function to check authorization for the given method.

        Raises `PermissionDenied` in case Authorizer is present but the request
        is not authorized.
        """
        # To authorize internal calls, we use an internal magic token.
        if headers.bearer_token == __internal_magic_token__:
            return None

        assert self._authorizer is not None

        async def authorize(state: IMPORT_typing.Optional[{{ state.proto.name }}StateType]) -> None:
            # Create context for the authorizer. This is a `ReaderContext`
            # independently of the calling context.
            with self.use_context(
                headers=(
                    # Get headers suitable for doing authorization.
                    headers.copy_for_token_verification_and_authorization()
                ),
                state_type_name = IMPORT_reboot_aio_types.StateTypeName('{{ state.proto.full_name }}'),
                context_type=IMPORT_reboot_aio_contexts.ReaderContext,
            ) as context:
                context.auth = auth

                # Get the authorizer decision.
                authorization_decision = await self._authorizer.authorize(
                    method_name=method_name,
                    context=context,
                    state=state,
                    request=request,
                )

            # Enforce correct authorizer decision type.
            try:
                IMPORT_reboot_aio_types.assert_type(
                    authorization_decision,
                    [
                        IMPORT_rbt_v1alpha1.errors_pb2.Ok,
                        IMPORT_rbt_v1alpha1.errors_pb2.Unauthenticated,
                        IMPORT_rbt_v1alpha1.errors_pb2.PermissionDenied,
                    ]
                )
            except TypeError as e:
                # Retyping.cast the exception to provide more context.
                authorizer_type = f"{type(self._authorizer).__module__}.{type(self._authorizer).__name__}"
                raise TypeError(
                    f"Authorizer '{authorizer_type}' "
                    f"returned unexpected type '{type(authorization_decision).__name__}' "
                    f"for method '{method_name}' on "
                    f"`{{ state.proto.full_name }}('{headers.state_ref.id}')`"
                ) from e

            # If the decision is not `True`, raise a `SystemAborted` with either a
            # `PermissionDenied` error (in case of `False`) or an `Unauthenticated`
            # error.
            if not isinstance(authorization_decision, IMPORT_rbt_v1alpha1.errors_pb2.Ok):
                if isinstance(authorization_decision, IMPORT_rbt_v1alpha1.errors_pb2.Unauthenticated):
                    logger.warning(
                        f"Unauthenticated call to '{method_name}' on "
                        f"`{{ state.proto.full_name }}('{headers.state_ref.id}')`"
                    )

                raise IMPORT_rebootdev.aio.aborted.SystemAborted(
                    authorization_decision,
                    message=
                    f"You are not authorized to call '{method_name}' on "
                    f"`{{ state.proto.full_name }}('{headers.state_ref.id}')`"
                )

        return authorize

    async def _maybe_verify_token(self, headers: IMPORT_reboot_aio_headers.Headers) -> IMPORT_typing.Optional[IMPORT_rebootdev.aio.auth.Auth]:
        """Verify the bearer token and if a token verifier is present.

        Returns the (optional) `rebootdev.aio.auth.Auth` object
        produced by the token verifier if the token can be verified.
        """
        if self._token_verifier is not None:
            if headers.bearer_token == __internal_magic_token__:
                return None

            with self.use_context(
                headers=(
                    # Get headers suitable for doing token verification.
                    headers.copy_for_token_verification_and_authorization()
                ),
                state_type_name = IMPORT_reboot_aio_types.StateTypeName('{{ state.proto.full_name }}'),
                context_type=IMPORT_reboot_aio_contexts.ReaderContext,
            ) as context:
                return await self._token_verifier.verify_token(
                    context=context,
                    token=headers.bearer_token,
                )

        return None

{% endfor %}

############################ Client Stubs ############################
# This section is relevant for clients accessing a Reboot service. Since
# servicers are themselves often clients also, this code is generated for
# them also.

{% macro stub_name(service_full_name) -%}
{{ service_full_name.lower().replace('.','_') }}_stub
{%- endmacro %}

{% for client in clients %}
class _{{ client.proto.state_name }}Stub(IMPORT_reboot_aio_stubs.Stub):

    __state_type_name__ = IMPORT_reboot_aio_types.StateTypeName('{{ client.proto.state_full_name }}')

    def __init__(
        self,
        *,
        context: IMPORT_reboot_aio_contexts.Context | IMPORT_reboot_aio_external.ExternalContext,
        state_ref: IMPORT_reboot_aio_types.StateRef,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ):
        # Within a Reboot context we do not pass on the caller's bearer token, as that might
        # have security implications - we cannot simply trust any service we are calling with
        # the user's credentials. Instead, the developer can rely on the default app-internal
        # auth, or override that and set an explicit bearer token.
        #
        # In the case of `ExternalContext`, however, its `bearer_token` was set specifically
        # by the developer for the purpose of making these calls.
        app_internal_authorization: IMPORT_typing.Optional[str] = None
        if isinstance(context, IMPORT_reboot_aio_external.ExternalContext):
            # Note that only `ExternalContext` even has a `bearer_token` field.
            bearer_token = context.bearer_token
            app_internal_authorization = context.app_internal_authorization

        super().__init__(
            channel_manager=context.channel_manager,
            idempotency_manager=context,
            state_ref=state_ref,
            context=context if isinstance(context, IMPORT_reboot_aio_contexts.Context) else None,
            bearer_token=bearer_token,
            app_internal_authorization=app_internal_authorization,
        )

        # All the channels for all services of this state will go to the same
        # place, so we can just get a single channel and share it across all
        # stubs.
        channel = self._channel_manager.get_channel_to_state(
            self.__state_type_name__, state_ref
        )
        {% for service in client.services %}
        self._{{ stub_name(service.proto.full_name) }} = {{ service.pb2_grpc_name }}.{{ service.proto.name }}Stub(channel)
        {% endfor %}


class {{ client.proto.state_name }}ReaderStub(_{{ client.proto.state_name }}Stub):

    def __init__(
        self,
        context: IMPORT_reboot_aio_contexts.ReaderContext | IMPORT_reboot_aio_contexts.WriterContext | IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        *,
        state_ref: IMPORT_reboot_aio_types.StateRef,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ):
        IMPORT_reboot_aio_types.assert_type(context, [IMPORT_reboot_aio_contexts.ReaderContext, IMPORT_reboot_aio_contexts.WriterContext, IMPORT_reboot_aio_contexts.TransactionContext, IMPORT_reboot_aio_contexts.WorkflowContext, IMPORT_reboot_aio_external.ExternalContext])
        super().__init__(
            context=context,
            state_ref=state_ref,
            bearer_token=bearer_token,
        )

    # {{ client.proto.state_name }} specific methods:
    {% for service in client.services %}
    {% for method in service.methods %}
    {%- if method.options.proto.kind == 'reader' %}
    async def {{ method.proto.name }}(
        self,
        {% if not method.proto.client_streaming %}
        request: {{ method.input_type }},
        {% else %}
        requests: IMPORT_typing.AsyncIterable[{{ method.input_type }}],
        {% endif %}
        *,
        metadata: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None,
        bearer_token: IMPORT_typing.Optional[str] = None,
    {% if not method.proto.server_streaming %}
    ) -> {{ method.output_type }}:
    {% else %}
    ) -> IMPORT_typing.AsyncIterable[{{ method.output_type }}]:
    {% endif %}
        async with self._call(
            IMPORT_reboot_aio_types.StateTypeName('{{ client.proto.state_full_name }}'),
            IMPORT_reboot_aio_types.ServiceName('{{ service.proto.full_name }}'),
            '{{ method.proto.name }}',
            self._{{ stub_name(service.proto.full_name) }}.{{ method.proto.name }},
            request{% if method.proto.client_streaming %}s{% endif %},
            unary={{ not method.proto.client_streaming and not method.proto.server_streaming }},
            reader=True,
            response_type={{ method.output_type }},
            aborted_type={{ client.proto.state_name }}.{{ method.proto.name }}Aborted,
            metadata=metadata,
            bearer_token=bearer_token,
        ) as call:
        {% if not method.proto.server_streaming %}
            assert isinstance(call, IMPORT_typing.Awaitable)
            return await call
        {% else %}
            assert isinstance(call, IMPORT_typing.AsyncIterable)
            async for response in call:
                yield response
        {% endif %}
    {% endif %}

    {% endfor %}
    {% endfor %}


class {{ client.proto.state_name }}WriterStub(_{{ client.proto.state_name }}Stub):

    def __init__(
        self,
        context: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        *,
        state_ref: IMPORT_reboot_aio_types.StateRef,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ):
        IMPORT_reboot_aio_types.assert_type(context, [IMPORT_reboot_aio_contexts.TransactionContext, IMPORT_reboot_aio_contexts.WorkflowContext, IMPORT_reboot_aio_external.ExternalContext])
        super().__init__(
            context=context,
            state_ref=state_ref,
            bearer_token=bearer_token,
        )

    # {{ client.proto.state_name }} specific methods:
    {% for service in client.services %}
    {% for method in service.methods %}
    {%- if method.options.proto.kind == 'reader' %}
    async def {{ method.proto.name }}(
        self,
        {% if not method.proto.client_streaming %}
        request: {{ method.input_type }},
        {% else %}
        requests: IMPORT_typing.AsyncIterable[{{ method.input_type }}],
        {% endif %}
        *,
        metadata: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None,
        bearer_token: IMPORT_typing.Optional[str] = None,
    {% if not method.proto.server_streaming %}
    ) -> {{ method.output_type }}:
    {% else %}
    ) -> IMPORT_typing.AsyncIterable[{{ method.output_type }}]:
    {% endif %}
        async with self._call(
            IMPORT_reboot_aio_types.StateTypeName('{{ client.proto.state_full_name }}'),
            IMPORT_reboot_aio_types.ServiceName('{{ service.proto.full_name }}'),
            '{{ method.proto.name }}',
            self._{{ stub_name(service.proto.full_name) }}.{{ method.proto.name }},
            request{% if method.proto.client_streaming %}s{% endif %},
            unary={{ not method.proto.client_streaming and not method.proto.server_streaming }},
            reader=True,
            response_type={{ method.output_type }},
            aborted_type={{ client.proto.state_name }}.{{ method.proto.name }}Aborted,
            metadata=metadata,
            bearer_token=bearer_token,
        ) as call:
        {% if not method.proto.server_streaming %}
            assert isinstance(call, IMPORT_typing.Awaitable)
            return await call
        {% else %}
            assert isinstance(call, IMPORT_typing.AsyncIterable)
            async for response in call:
                yield response
        {% endif %}
    {% elif method.options.proto.kind == 'writer' %}
    async def {{ method.proto.name }}(
        self,
        request: {{ method.input_type }},
        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
        *,
        metadata: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ) -> {{ method.output_type }}:
        with self._idempotency_manager.idempotently(
            state_type_name=IMPORT_reboot_aio_types.StateTypeName('{{ client.proto.state_full_name }}'),
            state_ref=self._headers.state_ref,
            service_name=IMPORT_reboot_aio_types.ServiceName('{{ service.proto.full_name }}'),
            method='{{ method.proto.name }}',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                IMPORT_reboot_aio_types.StateTypeName('{{ client.proto.state_full_name }}'),
                IMPORT_reboot_aio_types.ServiceName('{{ service.proto.full_name }}'),
                '{{ method.proto.name }}',
                self._{{ stub_name(service.proto.full_name) }}.{{ method.proto.name }},
                request{% if method.proto.client_streaming %}s{% endif %},
                unary={{ not method.proto.client_streaming and not method.proto.server_streaming }},
                reader=False,
                response_type={{ method.output_type }},
                aborted_type={{ client.proto.state_name }}.{{ method.proto.name }}Aborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, IMPORT_typing.Awaitable)
                return await call
    {% endif %}

    {% endfor %}
    {% endfor %}

class {{ client.proto.state_name }}WorkflowStub(_{{ client.proto.state_name }}Stub):

    def __init__(
        self,
        *,
        context: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        state_ref: IMPORT_reboot_aio_types.StateRef,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ):
        IMPORT_reboot_aio_types.assert_type(context, [IMPORT_reboot_aio_contexts.TransactionContext, IMPORT_reboot_aio_contexts.WorkflowContext, IMPORT_reboot_aio_external.ExternalContext])
        super().__init__(
            context=context,
            state_ref=state_ref,
            bearer_token=bearer_token,
        )

    # {{ client.proto.state_name }} specific methods:
    {% for service in client.services %}
    {% for method in service.methods %}
    {%- if method.options.proto.kind == 'reader' %}
    async def {{ method.proto.name }}(
        self,
        {% if not method.proto.client_streaming %}
        request: {{ method.input_type }},
        {% else %}
        requests: IMPORT_typing.AsyncIterable[{{ method.input_type }}],
        {% endif %}
        *,
        metadata: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None,
        bearer_token: IMPORT_typing.Optional[str] = None,
    {% if not method.proto.server_streaming %}
    ) -> {{ method.output_type }}:
    {% else %}
    ) -> IMPORT_typing.AsyncIterable[{{ method.output_type }}]:
    {% endif %}
        async with self._call(
            IMPORT_reboot_aio_types.StateTypeName('{{ client.proto.state_full_name }}'),
            IMPORT_reboot_aio_types.ServiceName('{{ service.proto.full_name }}'),
            '{{ method.proto.name }}',
            self._{{ stub_name(service.proto.full_name) }}.{{ method.proto.name }},
            request{% if method.proto.client_streaming %}s{% endif %},
            unary={{ not method.proto.client_streaming and not method.proto.server_streaming }},
            reader=True,
            response_type={{ method.output_type }},
            aborted_type={{ client.proto.state_name }}.{{ method.proto.name }}Aborted,
            metadata=metadata,
            bearer_token=bearer_token,
        ) as call:
        {% if not method.proto.server_streaming %}
            assert isinstance(call, IMPORT_typing.Awaitable)
            return await call
        {% else %}
            assert isinstance(call, IMPORT_typing.AsyncIterable)
            async for response in call:
                yield response
        {% endif %}
    {% elif method.options.proto.kind in ['writer', 'transaction'] %}
    async def {{ method.proto.name }}(
        self,
        request: {{ method.input_type }},
        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
        *,
        metadata: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ) -> {{ method.output_type }}:
        idempotency_key: IMPORT_typing.Optional[IMPORT_uuid.UUID]
        with self._idempotency_manager.idempotently(
            state_type_name=IMPORT_reboot_aio_types.StateTypeName('{{ client.proto.state_full_name }}'),
            state_ref=self._headers.state_ref,
            service_name=IMPORT_reboot_aio_types.ServiceName('{{ service.proto.full_name }}'),
            method='{{ method.proto.name }}',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                IMPORT_reboot_aio_types.StateTypeName('{{ client.proto.state_full_name }}'),
                IMPORT_reboot_aio_types.ServiceName('{{ service.proto.full_name }}'),
                '{{ method.proto.name }}',
                self._{{ stub_name(service.proto.full_name) }}.{{ method.proto.name }},
                request{% if method.proto.client_streaming %}s{% endif %},
                unary={{ not method.proto.client_streaming and not method.proto.server_streaming }},
                reader=False,
                response_type={{ method.output_type }},
                aborted_type={{ client.proto.state_name }}.{{ method.proto.name }}Aborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, IMPORT_typing.Awaitable)
                return await call
    {% endif %}

    {% endfor %}
    {% endfor %}


class {{ client.proto.state_name }}TasksStub(_{{ client.proto.state_name }}Stub):

    def __init__(
        self,
        context: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        *,
        state_ref: IMPORT_reboot_aio_types.StateRef,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ):
        IMPORT_reboot_aio_types.assert_type(context, [IMPORT_reboot_aio_contexts.TransactionContext, IMPORT_reboot_aio_contexts.WorkflowContext, IMPORT_reboot_aio_external.ExternalContext])
        super().__init__(
            context=context,
            state_ref=state_ref,
            bearer_token=bearer_token,
        )

    # {{ client.proto.state_name }} specific methods:
    {% for service in client.services %}
    {% for method in service.methods %}
    {% if not method.options.proto.constructor and not method.proto.server_streaming %}
    async def {{ method.proto.name }}(
        self,
        request: {{ method.input_type }},
        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
        *,
        metadata: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ) -> IMPORT_rbt_v1alpha1.tasks_pb2.TaskId:
        idempotency_key: IMPORT_typing.Optional[IMPORT_uuid.UUID]
        with self._idempotency_manager.idempotently(
            state_type_name=IMPORT_reboot_aio_types.StateTypeName('{{ client.proto.state_full_name }}'),
            state_ref=self._headers.state_ref,
            service_name=IMPORT_reboot_aio_types.ServiceName('{{ service.proto.full_name }}'),
            method='{{ method.proto.name }}',
            request=request,
            metadata=metadata,
            idempotency=idempotency,
        ) as idempotency_key:
            async with self._call(
                IMPORT_reboot_aio_types.StateTypeName('{{ client.proto.state_full_name }}'),
                IMPORT_reboot_aio_types.ServiceName('{{ service.proto.full_name }}'),
                '{{ method.proto.name }}',
                self._{{ stub_name(service.proto.full_name) }}.{{ method.proto.name }},
                request,
                unary=True,
                reader=False,
                response_type={{ method.output_type }},
                aborted_type={{ client.proto.state_name }}.{{ method.proto.name }}Aborted,
                metadata=metadata,
                idempotency_key=idempotency_key,
                bearer_token=bearer_token,
            ) as call:
                assert isinstance(call, IMPORT_typing.Awaitable)
                await call
                for (key, value) in await call.trailing_metadata():  # type: ignore[misc, attr-defined]
                    if key == IMPORT_reboot_aio_headers.TASK_ID_UUID:
                        return IMPORT_rbt_v1alpha1.tasks_pb2.TaskId(
                            state_type=IMPORT_reboot_aio_types.StateTypeName('{{ client.proto.state_full_name }}'),
                            state_ref=self._headers.state_ref.to_str(),
                            task_uuid=IMPORT_uuid.UUID(value).bytes,
                        )
                raise IMPORT_rebootdev.aio.aborted.SystemAborted(
                    IMPORT_rbt_v1alpha1.errors_pb2.Internal(),
                    message='Trailing metadata missing for task schedule',
                )
    {% endif %}
    {% endfor %}
    {% endfor %}


class {{ client.proto.state_name }}ServicerTasksStub(_{{ client.proto.state_name }}Stub):

    _context: IMPORT_reboot_aio_contexts.WriterContext

    def __init__(
        self,
        context: IMPORT_reboot_aio_contexts.WriterContext,
        *,
        state_ref: IMPORT_reboot_aio_types.StateRef,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ):
        IMPORT_reboot_aio_types.assert_type(context, [IMPORT_reboot_aio_contexts.WriterContext])
        super().__init__(
            context=context,
            state_ref=state_ref,
            bearer_token=bearer_token,
        )

        self._context = context

    # {{ client.proto.state_name }} specific methods:
    {% for service in client.services %}
    {% for method in service.methods %}
    def {{ method.proto.name }}(
        self,
        request: {{ method.input_type }},
        *,
        schedule: IMPORT_typing.Optional[IMPORT_datetime_datetime | IMPORT_datetime_timedelta] = None,
    ) -> IMPORT_reboot_aio_tasks.TaskEffect:
        schedule = ensure_has_timezone(when=schedule)
        task = IMPORT_reboot_aio_tasks.TaskEffect(
            state_type=IMPORT_reboot_aio_types.StateTypeName('{{ client.proto.state_full_name }}'),
            state_ref=self._headers.state_ref,
            method_name='{{ method.proto.name }}',
            request=request,
            schedule=(IMPORT_reboot_time_DateTimeWithTimeZone.now() + schedule) if isinstance(
                schedule, IMPORT_datetime_timedelta
            ) else schedule,
        )

        self._context._tasks.append(task)

        return task

    {% endfor %}
    {% endfor %}

{% endfor %}

############################ Authorizers ############################
# Relevant to servicers; irrelevant to clients.

{% for state in states %}
{{ state.proto.name }}StateType: IMPORT_typing.TypeAlias = {{ state.pb2_name }}.{{ state.proto.name }}
{{ state.proto.name }}RequestTypes: IMPORT_typing.TypeAlias = \
{% set request_types = [] %}
{% for service in state.services %}
{% for method in service.methods if method.input_type is not none and method.input_type not in request_types %}
{{- request_types.append(method.input_type) or '' -}}
{% endfor %}
{% endfor %}
{% for request_type in request_types %}
    {% if not loop.first %}        | {%else%}        {%endif%}{{ request_type }}{% if not loop.last %} \{%endif%}

{% endfor %}

class {{ state.proto.name }}Authorizer(
    IMPORT_rebootdev.aio.auth.authorizers.Authorizer[{{ state.proto.name }}StateType, {{ state.proto.name }}RequestTypes],
):
    StateType: IMPORT_typing.TypeAlias = {{ state.proto.name }}StateType
    RequestTypes: IMPORT_typing.TypeAlias = {{ state.proto.name }}RequestTypes
    Decision: IMPORT_typing.TypeAlias = IMPORT_rebootdev.aio.auth.authorizers.Authorizer.Decision

    def __init__(
        self,
        *,
        {% for service in state.services %}
        {% for method in service.methods %}
        {{ method.proto.name }}: IMPORT_typing.Optional[
            IMPORT_rebootdev.aio.auth.authorizers.AuthorizerRule[
              {{ state.pb2_name }}.{{ state.proto.name }},
              {{ method.input_type }},
            ]
        ] = None,
        {% endfor %}
        {% endfor %}
        # NOTE: using `_` prefix for `_default` so as not to collide
        # with any method names since a prefixed `_` is forbidden by
        # our protoc plugins.
        _default: IMPORT_rebootdev.aio.auth.authorizers.AuthorizerRule[
            {{ state.pb2_name }}.{{ state.proto.name }},
            IMPORT_google_protobuf_message.Message,
        ] = IMPORT_rebootdev.aio.auth.authorizers.allow_if(
            all=[IMPORT_rebootdev.aio.auth.authorizers.is_app_internal],
        ),
    ):
        {% for service in state.services %}
        {% for method in service.methods %}
        self._{{ method.proto.name }} = {{ method.proto.name }}
        {% endfor %}
        {% endfor %}
        self.__default = _default

    async def authorize(
        self,
        *,
        method_name: str,
        context: IMPORT_reboot_aio_contexts.ReaderContext,
        state: IMPORT_typing.Optional[{{ state.proto.name }}StateType],
        request: IMPORT_typing.Optional[{{ state.proto.name }}RequestTypes],
        **kwargs,
    ) -> IMPORT_rebootdev.aio.auth.authorizers.Authorizer.Decision:
        {% for service in state.services %}
        {% for method in service.methods %}
        {% if loop.first %}
        if method_name == '{{ method.proto.full_name }}':
        {% else %}
        elif method_name == '{{ method.proto.full_name }}':
        {% endif %}
            return await self.{{ method.proto.name }}(
                context=context,
                {% if not method.options.proto.constructor %}
                state=IMPORT_typing.cast({{ state.pb2_name }}.{{ state.proto.name }}, state),
                {% endif %}
                {% if not (method.options.proto.kind == 'reader' and method.proto.client_streaming) %}
                request=IMPORT_typing.cast({{ method.input_type }}, request),
                {% endif %}
            )
        {% endfor %}
        {% endfor %}
        else:
            return IMPORT_rbt_v1alpha1.errors_pb2.PermissionDenied()

    {% for service in state.services %}
    {% for method in service.methods %}
    # For '{{ method.proto.full_name }}'.
    async def {{ method.proto.name }}(
        self,
        *,
        context: IMPORT_reboot_aio_contexts.ReaderContext,
        {% if not method.options.proto.constructor %}
        state: {{ state.pb2_name }}.{{ state.proto.name }},
        {% endif %}
        {% if not (method.options.proto.kind == 'reader' and method.proto.client_streaming) %}
        request: {{ method.input_type }},
        {% endif %}
    ) -> IMPORT_rebootdev.aio.auth.authorizers.Authorizer.Decision:
        return await (self._{{ method.proto.name }} or self.__default).execute(
            context=context,
            {% if not method.options.proto.constructor %}
            state=IMPORT_typing.cast({{ state.pb2_name }}.{{ state.proto.name }}, state),
            {% else %}
            state=None,
            {% endif %}
            {% if not (method.options.proto.kind == 'reader' and method.proto.client_streaming) %}
            request=IMPORT_typing.cast({{ method.input_type }}, request),
            {% else %}
            request=None,
            {% endif %}
        )

    {% endfor %}
    {% endfor %}

{% endfor %}

############################ Reboot Servicers ############################
# Base classes for server-side implementations of Reboot servicers.
# Irrelevant to clients.

{% for state in states %}
{# TODO(rjh): support >1 service per state #}
class {{ state.proto.name }}Servicer(IMPORT_reboot_aio_servicers.Servicer):
    Authorizer: IMPORT_typing.TypeAlias = {{ state.proto.name }}Authorizer

    __service_names__ = [
        {% for service in state.services %}
        IMPORT_reboot_aio_types.ServiceName('{{ service.proto.full_name }}'),
        {% endfor %}
    ]
    __state_type_name__ = IMPORT_reboot_aio_types.StateTypeName('{{ state.proto.full_name }}')
    __state_type__ = {{ state.pb2_name }}.{{ state.proto.name }}
    __file_descriptor__ = {{ pb2_name }}.DESCRIPTOR

    def __init__(self):
        super().__init__()
        # NOTE: need to hold on to the middleware so we can do inline
        # writes (see 'self.write(...)').
        #
        # Because '_middleware' is not really private this does mean
        # users may do possibly dangerous things, but this is no more
        # likely given they could have already overridden
        # 'create_middleware()'.
        self._middleware: IMPORT_typing.Optional[{{ state.proto.name }}ServicerMiddleware] = None

    def create_middleware(
        self,
        *,
        application_id: IMPORT_reboot_aio_types.ApplicationId,
        consensus_id: IMPORT_reboot_aio_types.ConsensusId,
        state_manager: IMPORT_reboot_aio_state_managers.StateManager,
        placement_client: IMPORT_reboot_aio_placement.PlacementClient,
        channel_manager: IMPORT_reboot_aio_internals_channel_manager._ChannelManager,
        tasks_cache: IMPORT_reboot_aio_internals_tasks_cache.TasksCache,
        token_verifier: IMPORT_typing.Optional[IMPORT_rebootdev.aio.auth.token_verifiers.TokenVerifier],
        effect_validation: IMPORT_reboot_aio_contexts.EffectValidation,
        app_internal_api_key_secret: str,
        ready: IMPORT_asyncio.Event,
    ) -> {{ state.proto.name }}ServicerMiddleware:
        self._middleware = {{ state.proto.name }}ServicerMiddleware(
            servicer=self,
            application_id=application_id,
            consensus_id=consensus_id,
            state_manager=state_manager,
            placement_client=placement_client,
            channel_manager=channel_manager,
            tasks_cache=tasks_cache,
            token_verifier=token_verifier,
            effect_validation=effect_validation,
            app_internal_api_key_secret=app_internal_api_key_secret,
            ready=ready,
        )
        return self._middleware

    def authorizer(self) -> IMPORT_typing.Optional[IMPORT_rebootdev.aio.auth.authorizers.Authorizer | IMPORT_rebootdev.aio.auth.authorizers.AuthorizerRule]:
        return None

    def token_verifier(self) -> IMPORT_typing.Optional[IMPORT_rebootdev.aio.auth.token_verifiers.TokenVerifier]:
        return None

    def ref(
        self,
        *,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ) -> {{ state.proto.name }}.WeakReference[{{ state.proto.name }}.WeakReference._WriterSchedule]:
        context = IMPORT_reboot_aio_contexts.Context.get()

        if context is None:
            raise RuntimeError(
                'Missing asyncio context variable `context`; '
                'are you using this class without Reboot?'
            )

        return {{ state.proto.name }}.WeakReference(
            # TODO(https://github.com/reboot-dev/mono/issues/3226): add support for calling other applications.
            # For now this always stays within the application that creates the context.
            application_id=None,
            state_id=context._state_ref.id,
            schedule_type={{ state.proto.name }}.WeakReference._WriterSchedule,
            # If the user didn't specify a bearer token we may still end up using the app-internal bearer token,
            # but that's decided at the time of the call.
            bearer_token=bearer_token,
        )

    class Effects(IMPORT_reboot_aio_state_managers.Effects):
        def __init__(
            self,
            *,
            state: {{ state.pb2_name }}.{{ state.proto.name }},
            response: IMPORT_typing.Optional[IMPORT_google_protobuf_message.Message] = None,
            tasks: IMPORT_typing.Optional[list[IMPORT_reboot_aio_tasks.TaskEffect]] = None,
            _colocated_upserts: IMPORT_typing.Optional[list[tuple[str, IMPORT_typing.Optional[bytes]]]] = None,
        ):
            IMPORT_reboot_aio_types.assert_type(state, [{{ state.pb2_name }}.{{ state.proto.name }}])

            super().__init__(state=state, response=response, tasks=tasks, _colocated_upserts=_colocated_upserts)

    {% for service in state.services %}
    {% for method in service.methods %}
    {% if method.options.proto.kind == 'writer' %}
    # For '{{ method.proto.full_name }}'.
    class {{ method.proto.name }}Effects(Effects):
        def __init__(
            self,
            *,
            state: {{ state.pb2_name }}.{{ state.proto.name }},
            response: {{ method.output_type }},
            tasks: IMPORT_typing.Optional[list[IMPORT_reboot_aio_tasks.TaskEffect]] = None,
            _colocated_upserts: IMPORT_typing.Optional[list[tuple[str, IMPORT_typing.Optional[bytes]]]] = None,
        ):
            IMPORT_reboot_aio_types.assert_type(state, [{{ state.pb2_name }}.{{ state.proto.name }}])
            IMPORT_reboot_aio_types.assert_type(response, [{{ method.output_type }}])

            super().__init__(state=state, response=response, tasks=tasks, _colocated_upserts=_colocated_upserts)

    {% endif %}

    {% endfor %}
    {% endfor %}

    InlineWriterCallableResult = IMPORT_typing.TypeVar('InlineWriterCallableResult', covariant=True)

    class InlineWriterCallable(IMPORT_typing.Protocol[InlineWriterCallableResult]):
        async def __call__(
            self,
            state: {{ state.pb2_name }}.{{ state.proto.name }}
        ) -> {{ state.proto.name }}Servicer.InlineWriterCallableResult:
            ...

    class _State:

        def __init__(
            self,
            servicer,
        ):
            self._servicer = servicer

        async def read(
            self, context: IMPORT_reboot_aio_contexts.WorkflowContext
        ) -> {{ state.pb2_name }}.{{ state.proto.name }}:
            """Read the current state within a workflow."""

            IMPORT_reboot_aio_types.assert_type(context, [IMPORT_reboot_aio_contexts.WorkflowContext])

            if self._servicer._middleware is None:
                raise RuntimeError(
                    'Reboot middleware was not created; '
                    'are you using this class without Reboot?'
                )

            return await self._servicer._middleware._state_manager.read(
                context, self._servicer.__state_type__
            )

        @IMPORT_typing.overload
        async def write(
            self,
            idempotency_alias: str,
            context: IMPORT_reboot_aio_contexts.WorkflowContext,
            writer: {{ state.proto.name }}Servicer.InlineWriterCallable[None],
            __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
            *,
            type: type = type(None),
        ) -> None:
            ...

        @IMPORT_typing.overload
        async def write(
            self,
            idempotency_alias: str,
            context: IMPORT_reboot_aio_contexts.WorkflowContext,
            writer: {{ state.proto.name }}Servicer.InlineWriterCallable[{{ state.proto.name }}Servicer.InlineWriterCallableResult],
            __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
            *,
            type: type[{{ state.proto.name }}Servicer.InlineWriterCallableResult],
        ) -> {{ state.proto.name }}Servicer.InlineWriterCallableResult:
            ...

        async def write(
            self,
            idempotency_alias: str,
            context: IMPORT_reboot_aio_contexts.WorkflowContext,
            writer: {{ state.proto.name }}Servicer.InlineWriterCallable[{{ state.proto.name }}Servicer.InlineWriterCallableResult],
            __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
            *,
            type: type = type(None),
        ) -> {{ state.proto.name }}Servicer.InlineWriterCallableResult:
            """Perform an "inline write" within a workflow."""
            return await self.idempotently(idempotency_alias).write(
                context, writer, __options__, type=type
            )

        class _Idempotently:

            def __init__(
                self,
                *,
                servicer: {{ state.proto.name }}Servicer,
                idempotency: IMPORT_reboot_aio_idempotency.Idempotency,
            ):
                self._servicer = servicer
                self._idempotency = idempotency

            @IMPORT_typing.overload
            async def write(
                self,
                context: IMPORT_reboot_aio_contexts.WorkflowContext,
                writer: {{ state.proto.name }}Servicer.InlineWriterCallable[None],
                __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
                *,
                type: type = type(None),
                check_type: bool = True,
            ) -> None:
                ...

            @IMPORT_typing.overload
            async def write(
                self,
                context: IMPORT_reboot_aio_contexts.WorkflowContext,
                writer: {{ state.proto.name }}Servicer.InlineWriterCallable[{{ state.proto.name }}Servicer.InlineWriterCallableResult],
                __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
                *,
                type: type[{{ state.proto.name }}Servicer.InlineWriterCallableResult],
                check_type: bool = True,
            ) -> {{ state.proto.name }}Servicer.InlineWriterCallableResult:
                ...

            async def write(
                self,
                context: IMPORT_reboot_aio_contexts.WorkflowContext,
                writer: {{ state.proto.name }}Servicer.InlineWriterCallable[{{ state.proto.name }}Servicer.InlineWriterCallableResult],
                __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
                *,
                type: type = type(None),
                check_type: bool = True,
            ) -> {{ state.proto.name }}Servicer.InlineWriterCallableResult:
                return await self._write(
                    context,
                    writer,
                    __options__,
                    type_result=type,
                    check_type=check_type,
                    unidempotently=False,
                )

            async def _write(
                self,
                context: IMPORT_reboot_aio_contexts.WorkflowContext,
                writer: {{ state.proto.name }}Servicer.InlineWriterCallable[{{ state.proto.name }}Servicer.InlineWriterCallableResult],
                __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
                *,
                type_result: type,
                check_type: bool,
                unidempotently: bool,
            ) -> {{ state.proto.name }}Servicer.InlineWriterCallableResult:
                return await self._write_validating_effects(
                    self._servicer,
                    self._idempotency,
                    context,
                    writer,
                    __options__,
                    type_result=type_result,
                    check_type=check_type,
                    unidempotently=unidempotently,
                )

            @staticmethod
            @IMPORT_reboot_aio_internals_middleware.maybe_run_function_twice_to_validate_effects
            async def _write_validating_effects(
                validating_effects: bool,
                servicer: {{ state.proto.name }}Servicer,
                idempotency: IMPORT_reboot_aio_idempotency.Idempotency,
                context: IMPORT_reboot_aio_contexts.WorkflowContext,
                writer: {{ state.proto.name }}Servicer.InlineWriterCallable[{{ state.proto.name }}Servicer.InlineWriterCallableResult],
                __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
                *,
                type_result: type,
                check_type: bool,
                unidempotently: bool,
            ) -> {{ state.proto.name }}Servicer.InlineWriterCallableResult:
                IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                if __options__.idempotency is not None:
                    raise RuntimeError(
                        'Found redundant idempotency in `Options`'
                    )

                assert not idempotency.generate, (
                    "Inline writers are always required to specify either an "
                    "idempotency alias or an idempotency key"
                )

                IMPORT_reboot_aio_types.assert_type(context, [IMPORT_reboot_aio_contexts.WorkflowContext])

                if servicer._middleware is None:
                    raise RuntimeError(
                        'Reboot middleware was not created; '
                        'are you using this class without Reboot?'
                    )

                metadata: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None

                if __options__ is not None:
                    if __options__.metadata is not None:
                        metadata = __options__.metadata

                if metadata is None:
                    metadata = ()

                headers = IMPORT_reboot_aio_headers.Headers(
                    application_id=context.application_id,
                    state_ref=context._state_ref,
                )

                metadata += headers.to_grpc_metadata()

                idempotency_key: IMPORT_typing.Optional[IMPORT_uuid.UUID]
                with context.idempotently(
                    state_type_name=IMPORT_reboot_aio_types.StateTypeName('{{ state.proto.full_name }}'),
                    state_ref=context._state_ref,
                    service_name=None,  # Indicates an inline writer.
                    method=None,  # Indicates an inline writer.
                    request=None,
                    metadata=metadata,
                    idempotency=idempotency,
                ) as idempotency_key:

                    if any(t[0] == IMPORT_reboot_aio_headers.IDEMPOTENCY_KEY_HEADER for t in metadata):
                        raise ValueError(
                            f"Do not set '{IMPORT_reboot_aio_headers.IDEMPOTENCY_KEY_HEADER}' metadata yourself"
                        )

                    if idempotency_key is not None:
                        metadata += (
                            (IMPORT_reboot_aio_headers.IDEMPOTENCY_KEY_HEADER, str(idempotency_key)),
                        )

                    with servicer._middleware.use_context(
                        headers=IMPORT_reboot_aio_headers.Headers.from_grpc_metadata(metadata),
                        state_type_name = IMPORT_reboot_aio_types.StateTypeName('{{ state.proto.full_name }}'),
                        context_type=IMPORT_reboot_aio_contexts.WriterContext,
                    ) as writer_context:
                        # Check if we already have performed this mutation!
                        #
                        # We do this _before_ calling 'transactionally()' because
                        # if this call is for a transaction method _and_ we've
                        # already performed the transaction then we don't want to
                        # become a transaction participant (again) we just want to
                        # return the transaction's response.
                        idempotent_mutation = (
                            servicer._middleware._state_manager.check_for_idempotent_mutation(
                                writer_context
                            )
                        )

                        if idempotent_mutation is not None:
                            assert len(idempotent_mutation.response) != 0
                            response = IMPORT_google_protobuf_wrappers_pb2.BytesValue()
                            response.ParseFromString(idempotent_mutation.response)
                            result: {{ state.proto.name }}Servicer.InlineWriterCallableResult = IMPORT_pickle.loads(response.value)

                            if check_type and type(result) is not type_result:
                                raise TypeError(
                                    f"Stored result of type '{type(result).__name__}' from 'writer' "
                                    f"is not of expected type '{type_result.__name__}'; have you changed "
                                    "the 'type' that you expect after having stored a result?"
                                )

                            return result

                        async with servicer._middleware._state_manager.transactionally(
                            writer_context, servicer._middleware.tasks_dispatcher
                        ) as transaction:
                            async with servicer._middleware._state_manager.writer(
                                writer_context,
                                servicer.__state_type__,
                                servicer._middleware.tasks_dispatcher,
                                # TODO: Decide if we want to do any kind of authorization for inline
                                # writers otherwise passing `None` here is fine.
                                authorize=None,
                                transaction=transaction,
                            ) as (state, state_manager_writer):
                                result = await writer(state=state)

                                if check_type and type(result) is not type_result:
                                    raise TypeError(
                                        f"Result of type '{type(result).__name__}' from 'writer' is "
                                        f"not of expected type '{type_result.__name__}'; "
                                        "did you specify an incorrect 'type'?"
                                    )

                                effects = {{ state.proto.name }}Servicer.Effects(
                                    state=state,
                                    tasks=context._tasks,
                                    response=IMPORT_google_protobuf_wrappers_pb2.BytesValue(
                                        value=IMPORT_pickle.dumps(result)
                                    ),
                                )

                                task: IMPORT_typing.Optional[IMPORT_reboot_aio_tasks.TaskEffect] = context.task

                                assert task is not None, (
                                    "Should always have a task when running a `workflow`"
                                )

                                method_name = f"{{ state.proto.name }}.{task.method_name} "

                                if unidempotently:
                                    method_name += "unidempotent inline writer"
                                elif idempotency.alias is not None:
                                    method_name += "inline writer with idempotency alias '" + idempotency.alias + "'"
                                else:
                                    assert idempotency.key is not None
                                    method_name += "inline writer with idempotency key=" + str(idempotency.key)

                                servicer._middleware.maybe_raise_effect_validation_retry(
                                    logger=logger,
                                    idempotency_manager=context,
                                    method_name=method_name,
                                    validating_effects=validating_effects,
                                    context=context,
                                )

                                await state_manager_writer.complete(effects)

                                return result

        @IMPORT_typing.overload
        def idempotently(self, alias: str, *, each_iteration: bool = False) -> {{ state.proto.name }}Servicer._State._Idempotently:
            ...

        @IMPORT_typing.overload
        def idempotently(self, *, key: IMPORT_uuid.UUID) -> {{ state.proto.name }}Servicer._State._Idempotently:
            ...

        def idempotently(
            self,
            alias: IMPORT_typing.Optional[str] = None,
            *,
            key: IMPORT_typing.Optional[IMPORT_uuid.UUID] = None,
            each_iteration: IMPORT_typing.Optional[bool] = None,
        ) -> {{ state.proto.name }}Servicer._State._Idempotently:
            if alias is None and key is None:
                raise ValueError(
                    'Inline writers require either an idempotency alias or key'
                )
            return {{ state.proto.name }}Servicer._State._Idempotently(
                servicer=self._servicer,
                idempotency=IMPORT_reboot_aio_contexts.Context.idempotency(
                    key=key, alias=alias, each_iteration=each_iteration
                ),
            )

        class _Unidempotently:

            def __init__(
                self,
                *,
                servicer: {{ state.proto.name }}Servicer,
            ):
                self._servicer = servicer

            async def write(
                self,
                context: IMPORT_reboot_aio_contexts.WorkflowContext,
                writer: {{ state.proto.name }}Servicer.InlineWriterCallable[{{ state.proto.name }}Servicer.InlineWriterCallableResult],
                __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
            ) -> {{ state.proto.name }}Servicer.InlineWriterCallableResult:
                return await {{ state.proto.name }}Servicer._State._Idempotently(
                    servicer=self._servicer,
                    idempotency=IMPORT_reboot_aio_contexts.Context.idempotency(
                        key=IMPORT_uuid.uuid4()
                    ),
                )._write(
                    context,
                    writer,
                    __options__,
                    type_result=type(None),
                    check_type=False,
                    unidempotently=True,
                )

        def unidempotently(self):
            return {{ state.proto.name }}Servicer._State._Unidempotently(
                servicer=self._servicer,
            )

    @property
    def state(self):
        return {{ state.proto.name }}Servicer._State(
            servicer=self
        )

    {% for service in state.services %}
    {% for method in service.methods %}
    # For '{{ method.proto.full_name }}'.
    {% if method.options.proto.kind == 'reader' %}
    @IMPORT_abc_abstractmethod
    async def {{ method.proto.name }}(
        self,
        context: IMPORT_reboot_aio_contexts.ReaderContext,
        {% if not method.options.proto.state_streaming %}
        state: {{ state.pb2_name }}.{{ state.proto.name }},
        {% else %}
        states: IMPORT_typing.AsyncIterable[{{ state.pb2_name }}.{{ state.proto.name }}],
        {% endif %}
        {% if not method.proto.client_streaming %}
        request: {{ method.input_type }},
        {% else %}
        requests: IMPORT_typing.AsyncIterable[{{ method.input_type }}],
        {% endif %}
    {% if not method.proto.server_streaming %}
    ) -> {{ method.output_type }}:
    {% else %}
    ) -> IMPORT_typing.AsyncIterable[{{ method.output_type }}]:
    {% endif %}
        raise NotImplementedError
        {% if method.proto.server_streaming %}
        yield  # Necessary for type checking.
        {% endif %}
    {% elif method.options.proto.kind == 'writer' %}
    @IMPORT_abc_abstractmethod
    async def {{ method.proto.name }}(
        self,
        context: IMPORT_reboot_aio_contexts.WriterContext,
        state: {{ state.pb2_name }}.{{ state.proto.name }},
        request: {{ method.input_type }},
    ) -> {{ method.output_type }}:
        raise NotImplementedError
    {% elif method.options.proto.kind == 'transaction' %}
    @IMPORT_abc_abstractmethod
    async def {{ method.proto.name }}(
        self,
        context: IMPORT_reboot_aio_contexts.TransactionContext,
        state: {{ state.pb2_name }}.{{ state.proto.name }},
        request: {{ method.input_type }},
    ) -> {{ method.output_type }}:
        raise NotImplementedError
    {% elif method.options.proto.kind == 'workflow' %}
    @IMPORT_abc_abstractmethod
    async def {{ method.proto.name }}(
        self,
        context: IMPORT_reboot_aio_contexts.WorkflowContext,
        request: {{ method.input_type }},
    ) -> {{ method.output_type }} | IMPORT_reboot_aio_tasks.Loop:
        raise NotImplementedError
    {% endif %}

    {% endfor %}
    {% endfor %}

{% endfor %}

############################ Clients ############################
# The main developer-facing entrypoints for any Reboot type. Relevant to both
# clients and servicers (who use it to find the right servicer base types, as well
# as often being clients themselves).

# Attach an explicit time time zone to "naive" `datetime` objects. A "naive" `datetime` doesn't have a
# time zone. Such objects are typically interpreted as representing local time, but could be confused
# for objects representing UTC. This helper function disambiguates by explicitly attaching the local
# time zone to `datetime` objects that don't already have an explicit time zone. If the `datetime` object
# is already timezone-aware, we still convert it to our custom `DateTimeWithTimeZone` type.
def ensure_has_timezone(
    *,
    when: IMPORT_typing.Optional[IMPORT_datetime_datetime | IMPORT_datetime_timedelta] = None,
) -> IMPORT_typing.Optional[IMPORT_reboot_time_DateTimeWithTimeZone | IMPORT_datetime_timedelta]:
    if isinstance(when, IMPORT_datetime_datetime):
        return IMPORT_reboot_time_DateTimeWithTimeZone.from_datetime(when)
    return when

{% for client in clients %}
{{ client.proto.state_name }}_ScheduleTypeVar = IMPORT_typing.TypeVar('{{ client.proto.state_name }}_ScheduleTypeVar', '{{ client.proto.state_name }}.WeakReference._Schedule', '{{ client.proto.state_name }}.WeakReference._WriterSchedule')
{{ client.proto.state_name }}_IdempotentlyScheduleTypeVar = IMPORT_typing.TypeVar('{{ client.proto.state_name }}_IdempotentlyScheduleTypeVar', '{{ client.proto.state_name }}.WeakReference._Schedule', '{{ client.proto.state_name }}.WeakReference._WriterSchedule')

class {{ client.proto.state_name }}:

    {% if client.state is not none %}
    Servicer: IMPORT_typing.TypeAlias = {{ client.proto.state_name }}Servicer

    Effects: IMPORT_typing.TypeAlias = {{ client.proto.state_name }}Servicer.Effects

    Authorizer: IMPORT_typing.TypeAlias = {{ client.proto.state_name }}Authorizer

    State: IMPORT_typing.TypeAlias = {{ pb2_name }}.{{ client.proto.state_name }}
    {% endif %}

    __state_type_name__ = IMPORT_reboot_aio_types.StateTypeName("{{ client.proto.state_full_name }}")

    {% for service in client.services %}
    {% for method in service.methods %}
    class {{ method.proto.name }}Task:
        """Represents a scheduled task running for the
        state. Note that this is not a coroutine because we are trying
        to convey the semantics that the task is already running (or
        will soon be).
        """

        @classmethod
        def retrieve(
            cls,
            context: IMPORT_reboot_aio_contexts.Context | IMPORT_reboot_aio_external.ExternalContext,
            *,
            task_id: IMPORT_rbt_v1alpha1.tasks_pb2.TaskId,
        ):
            return cls(context, task_id=task_id)

        def __init__(
            self,
            context: IMPORT_reboot_aio_contexts.Context | IMPORT_reboot_aio_external.ExternalContext,
            *,
            task_id: IMPORT_rbt_v1alpha1.tasks_pb2.TaskId,
        ) -> None:
            # Depending on the context type (inside or outside a Reboot application)
            # we may or may not know the application ID. If we don't know it, then
            # the `ExternalContext.gateway` will determine it.
            #
            # TODO: in the future we expect to support cross-application calls, in
            #       which case the developer may explicitly pass in an application ID
            #       here.
            self._application_id: IMPORT_typing.Optional[IMPORT_reboot_aio_types.ApplicationId] = None
            if isinstance(context, IMPORT_reboot_aio_contexts.Context):
                self._application_id = context.application_id
            self._channel_manager = context.channel_manager
            self._task_id = task_id

        @property
        def task_id(self) -> IMPORT_rbt_v1alpha1.tasks_pb2.TaskId:
            return self._task_id

        def __await__(self) -> IMPORT_typing.Generator[None, None, {{ method.output_type }}]:
            """Awaits for task to finish and returns it's response."""
            async def wait_for_task() -> {{ method.output_type }}:
                channel = self._channel_manager.get_channel_to_state(
                    self._task_id.state_type,
                    IMPORT_reboot_aio_types.StateRef(self._task_id.state_ref),
                )

                stub = IMPORT_rbt_v1alpha1.tasks_pb2_grpc.TasksStub(channel)

                try:
                    wait_for_task_response = await stub.Wait(
                        IMPORT_rbt_v1alpha1.tasks_pb2.WaitRequest(task_id=self._task_id),
                        metadata=IMPORT_reboot_aio_headers.Headers(
                            state_ref=IMPORT_reboot_aio_types.StateRef(self._task_id.state_ref),
                            application_id=self._application_id,
                        ).to_grpc_metadata(),
                    )
                except IMPORT_grpc.aio.AioRpcError as error:
                    if error.code() == IMPORT_grpc.StatusCode.NOT_FOUND:
                        raise IMPORT_rebootdev.aio.aborted.SystemAborted(
                            IMPORT_rbt_v1alpha1.errors_pb2.UnknownTask()
                        ) from None

                    raise IMPORT_rebootdev.aio.aborted.SystemAborted.from_grpc_aio_rpc_error(
                        error
                    ) from None
                else:
                    response_or_error: IMPORT_typing.Optional[IMPORT_google_protobuf_any_pb2.Any] = None
                    is_error = False

                    if wait_for_task_response.response_or_error.WhichOneof("response_or_error") == "response":
                        response_or_error = wait_for_task_response.response_or_error.response
                    else:
                        is_error = True
                        response_or_error = wait_for_task_response.response_or_error.error

                    assert response_or_error is not None
                    assert response_or_error.TypeName() != ""

                    response = {{ method.output_type }}()

                    if (
                        not is_error and response_or_error.TypeName() != response.DESCRIPTOR.full_name
                    ):
                        raise IMPORT_rebootdev.aio.aborted.SystemAborted(
                            IMPORT_rbt_v1alpha1.errors_pb2.InvalidArgument(),
                            message=
                            f"task with UUID {str(IMPORT_uuid.UUID(bytes=self._task_id.task_uuid))} "
                            f"has a response of type '{response_or_error.TypeName()}' "
                            "but expecting type '{{ method.output_type }}'; "
                            "are you waiting on a task of the correct method?",
                        ) from None

                    if is_error:
                        # Currently only cancelled error is supported.
                        raise IMPORT_asyncio.CancelledError("Task was cancelled by a TasksServicer")
                    else:
                        response_or_error.Unpack(response)
                        return response

            return wait_for_task().__await__()

    {% if method.options.proto.kind == 'writer' and client.state is not none %}
    {{ method.proto.name }}Effects: IMPORT_typing.TypeAlias = Servicer.{{ method.proto.name }}Effects
    {% endif %}

    class {{ method.proto.name }}Aborted(IMPORT_rebootdev.aio.aborted.Aborted):

        {% if method.options.errors|length > 0 %}
        MethodError = IMPORT_typing.Union[
            {% for error, type in method.options.errors.items() %}
            {{ type }}{% if not loop.last %}, {% endif %}
            {% endfor %}
        ]
        {% endif %}

        Error = IMPORT_typing.Union[
            {% if method.options.errors|length > 0 %}
            MethodError,
            {% endif %}
            IMPORT_rebootdev.aio.aborted.GrpcError,
            IMPORT_rebootdev.aio.aborted.RebootError,
        ]

        METHOD_ERROR_TYPES: list[type[Error]] = [
            {% for error, type in method.options.errors.items() %}
            {{ type }}{% if not loop.last %}, {% endif %}
            {% endfor %}
        ]

        ERROR_TYPES: list[type[Error]] = (
            METHOD_ERROR_TYPES +
            IMPORT_rebootdev.aio.aborted.GRPC_ERROR_TYPES +
            IMPORT_rebootdev.aio.aborted.REBOOT_ERROR_TYPES
        )

        _error: Error
        _code: IMPORT_grpc.StatusCode
        _message: IMPORT_typing.Optional[str]

        def __init__(
            self,
            error: {% if method.options.errors|length > 0 %}MethodError | {% endif %} IMPORT_rebootdev.aio.aborted.GrpcError,
            *,
            message: IMPORT_typing.Optional[str] = None,
            # Do not set this value when constructing in order to
            # raise. This is only used internally when constructing
            # from aborted calls.
            error_types: list[type[Error]] = (
                METHOD_ERROR_TYPES + IMPORT_rebootdev.aio.aborted.GRPC_ERROR_TYPES
            ),
        ):
            super().__init__()

            IMPORT_reboot_aio_types.assert_type(error, error_types)

            self._error = error

            code = self.grpc_status_code_from_error(self._error)

            if code is None:
                # Must be a Reboot specific or declared method error.
                code = IMPORT_grpc.StatusCode.ABORTED

            self._code = code

            self._message = message

        @property
        def error(self) -> Error:
            return self._error

        @property
        def code(self) -> IMPORT_grpc.StatusCode:
            return self._code

        @property
        def message(self) -> IMPORT_typing.Optional[str]:
            return self._message

        @classmethod
        def from_status(cls, status: IMPORT_google_rpc_status_pb2.Status):
            error = cls.error_from_google_rpc_status_details(
                status,
                cls.ERROR_TYPES,
            )

            message = status.message if len(status.message) > 0 else None

            if error is not None:
                return cls(error, message=message, error_types=cls.ERROR_TYPES)

            error = cls.error_from_google_rpc_status_code(status)

            assert error is not None

            # TODO(benh): also consider getting the type names from
            # `status.details` and including that in `message` to make
            # debugging easier.

            return cls(error, message=message)

        @classmethod
        def from_grpc_aio_rpc_error(cls, aio_rpc_error: IMPORT_grpc.aio.AioRpcError):
            return cls(
                cls.error_from_grpc_aio_rpc_error(aio_rpc_error),
                message=aio_rpc_error.details(),
            )

        @classmethod
        def is_declared_error(cls, message: IMPORT_google_protobuf_message.Message) -> bool:
            {% for name in method.options.errors.keys() %}
            {% if loop.first %}
            if message.DESCRIPTOR.full_name == '{{ name }}':
            {% else %}
            elif message.DESCRIPTOR.full_name == '{{ name }}':
            {% endif %}
                return True
            {% endfor %}
            return False

    {% endfor %}
    {% endfor %}

    class WeakReference(IMPORT_typing.Generic[{{ client.proto.state_name }}_ScheduleTypeVar]):

        _schedule_type: type[{{ client.proto.state_name }}_ScheduleTypeVar]

        def __init__(
            self,
            # When application ID is None, refers to a state within the application given by the context.
            application_id: IMPORT_typing.Optional[IMPORT_reboot_aio_types.ApplicationId],
            state_id: IMPORT_reboot_aio_types.StateId,
            *,
            schedule_type: type[{{ client.proto.state_name }}_ScheduleTypeVar],
            bearer_token: IMPORT_typing.Optional[str] = None,
        ):
            self._application_id = application_id
            self._state_ref = IMPORT_reboot_aio_types.StateRef.from_id(
              {{ client.proto.state_name }}.__state_type_name__,
              state_id,
            )
            self._schedule_type = schedule_type
            self._idempotency_manager: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.IdempotencyManager] = None
            self._reader_stub: IMPORT_typing.Optional[{{ client.proto.state_name }}ReaderStub] = None
            self._writer_stub: IMPORT_typing.Optional[{{ client.proto.state_name }}WriterStub] = None
            self._workflow_stub: IMPORT_typing.Optional[{{ client.proto.state_name }}WorkflowStub] = None
            self._tasks_stub: IMPORT_typing.Optional[{{ client.proto.state_name }}TasksStub] = None
            self._bearer_token = bearer_token

        @property
        def state_id(self) -> IMPORT_reboot_aio_types.StateId:
            return self._state_ref.id

        def _reader(
            self,
            context: IMPORT_reboot_aio_contexts.ReaderContext | IMPORT_reboot_aio_contexts.WriterContext | IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        ) -> {{ client.proto.state_name }}ReaderStub:
            if self._reader_stub is None:
                self._reader_stub = {{ client.proto.state_name }}ReaderStub(
                    context=context,
                    state_ref=self._state_ref,
                    bearer_token=self._bearer_token,
                )
            assert self._reader_stub is not None
            if self._idempotency_manager is None:
                self._idempotency_manager = context
            elif self._idempotency_manager != context:
                raise IMPORT_reboot_aio_call.MixedContextsError(
                    "This `WeakReference` for `{{ client.proto.state_name }}` with ID "
                    f"'{self.state_id}' has previously been used by a "
                    "different `Context`. That is not allowed. "
                    "Instead create a new `WeakReference` for every `Context` by calling "
                    f"`{{ client.proto.state_name }}.ref('{self.state_id}')`."
                )
            return self._reader_stub

        def _writer(
            self,
            context: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        ) -> {{ client.proto.state_name }}WriterStub:
            if self._writer_stub is None:
                self._writer_stub = {{ client.proto.state_name }}WriterStub(
                    context=context,
                    state_ref=self._state_ref,
                    bearer_token=self._bearer_token,
                )
            assert self._writer_stub is not None
            if self._idempotency_manager is None:
                self._idempotency_manager = context
            elif self._idempotency_manager != context:
                raise IMPORT_reboot_aio_call.MixedContextsError(
                    "This `WeakReference` for `{{ client.proto.state_name }}` with ID "
                    f"'{self.state_id}' has previously been used by a "
                    "different `Context`. That is not allowed. "
                    "Instead create a new `WeakReference` for every `Context` by calling "
                    f"`{{ client.proto.state_name }}.ref('{self.state_id}')`."
                )
            return self._writer_stub

        def _workflow(
            self,
            context: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        ) -> {{ client.proto.state_name }}WorkflowStub:
            if self._workflow_stub is None:
                self._workflow_stub = {{ client.proto.state_name }}WorkflowStub(
                    context=context,
                    state_ref=self._state_ref,
                    bearer_token=self._bearer_token,
                )
            assert self._workflow_stub is not None
            if self._idempotency_manager is None:
                self._idempotency_manager = context
            elif self._idempotency_manager != context:
                raise IMPORT_reboot_aio_call.MixedContextsError(
                    "This `WeakReference` for `{{ client.proto.state_name }}` with ID "
                    f"'{self.state_id}' has previously been used by a "
                    "different `Context`. That is not allowed. "
                    "Instead create a new `WeakReference` for every `Context` by calling "
                    f"`{{ client.proto.state_name }}.ref('{self.state_id}')`."
                )
            return self._workflow_stub

        def _tasks(
            self,
            context: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        ) -> {{ client.proto.state_name }}TasksStub:
            if self._tasks_stub is None:
                self._tasks_stub = {{ client.proto.state_name }}TasksStub(
                    context=context,
                    state_ref=self._state_ref,
                    bearer_token=self._bearer_token,
                )
            assert self._tasks_stub is not None
            if self._idempotency_manager is None:
                self._idempotency_manager = context
            elif self._idempotency_manager != context:
                raise IMPORT_reboot_aio_call.MixedContextsError(
                    "This `WeakReference` for `{{ client.proto.state_name }}` with ID "
                    f"'{self.state_id}' has previously been used by a "
                    "different `Context`. That is not allowed. "
                    "Instead create a new `WeakReference` for every `Context` by calling "
                    f"`{{ client.proto.state_name }}.ref('{self.state_id}')`."
                )
            return self._tasks_stub

        class _Reactively:

            def __init__(
                self,
                *,
                application_id: IMPORT_typing.Optional[IMPORT_reboot_aio_types.ApplicationId],
                state_ref: IMPORT_reboot_aio_types.StateRef,
                bearer_token: IMPORT_typing.Optional[str] = None,
            ):
                self._application_id = application_id
                self._state_ref = state_ref
                self._bearer_token = bearer_token

            {% for service in client.services %}
            {% for method in service.methods %}
            {% if method.options.proto.kind == 'reader' and not method.proto.client_streaming and not method.proto.server_streaming %}
            async def {{ method.proto.name }}(
                # In methods which are dealing with user input, (i.e.,
                # proto message field names), we should use '__double_underscored__'
                # variables to avoid any potential name conflicts with the method's
                # parameters.
                # The '__self__' parameter is a convention in Python to
                # indicate that this method is a bound method, so we use
                # '__this__' instead.
                __this__,
                # Explicitly-reactive calls only make sense in the context of either...
                # (A) an external client, or...
                # (B) methods that may reasonably run for a long time, which in Reboot means: readers or workflows.
                __context__: IMPORT_reboot_aio_external.ExternalContext | IMPORT_reboot_aio_contexts.ReaderContext | IMPORT_reboot_aio_contexts.WorkflowContext,
                __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
                {% for name, type in method.input_type_fields.items() %}
                {% if loop.first %}
                *,
                {% endif %}
                {{ name }}: IMPORT_typing.Optional[{{ type }}] = None,
                {% endfor %}
            ) -> IMPORT_typing.AsyncIterator[{{ method.output_type }}]:
                # UX improvement: check that neither positional argument was accidentally
                # given a gRPC request type.
                IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type={{ method.input_type }})
                IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type={{ method.input_type }})
                IMPORT_reboot_aio_types.assert_type(__context__, [IMPORT_reboot_aio_external.ExternalContext, IMPORT_reboot_aio_contexts.ReaderContext, IMPORT_reboot_aio_contexts.WorkflowContext])

                # TODO: mypy-protobuf declares that
                # `google.protobuf.message.Message` constructor arguments are
                # always non-None, when in reality they are optional.
                __request__ = {{ method.input_type }}(
                    {% for name in method.input_type_fields %}
                    {{ name }}={{ name }},  # type: ignore[arg-type]
                    {% endfor %}
                )

                __metadata__: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None
                __bearer_token__: IMPORT_typing.Optional[str] = None
                __app_internal_authorization__: IMPORT_typing.Optional[str] = None

                if __options__ is not None:
                    IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                    if __options__.metadata is not None:
                        __metadata__ = __options__.metadata
                    if __options__.bearer_token is not None:
                        __bearer_token__ = __options__.bearer_token

                if __bearer_token__ is None:
                    __bearer_token__ = __this__._bearer_token
                if __bearer_token__ is None and isinstance(__context__, IMPORT_reboot_aio_external.ExternalContext):
                    # Within a Reboot context we do not pass on the caller's bearer token, as that might
                    # have security implications - we cannot simply trust any service we are calling with
                    # the user's credentials. Instead, the developer can rely on the default app-internal
                    # auth, or override that and set an explicit bearer token.
                    #
                    # In the case of `ExternalContext`, however, its `bearer_token` was set specifically
                    # by the developer for the purpose of making these calls. Note that only
                    # `ExternalContext` even has a `bearer_token` field.
                    __bearer_token__ = __context__.bearer_token

                if __metadata__ is None:
                    __metadata__ = ()

                if isinstance(__context__, IMPORT_reboot_aio_contexts.Context):
                    if __this__._application_id is None:
                        # Given our context type (inside a Reboot application) we can default to
                        # making the application send traffic to itself.
                        __this__._application_id = __context__.application_id
                        # It is safe to use app-internal auth given we know we're talking to
                        # the same application.
                        __app_internal_authorization__ = __context__._app_internal_api_key_secret

                __headers__ = IMPORT_reboot_aio_headers.Headers(
                    bearer_token=__bearer_token__,
                    state_ref=__this__._state_ref,
                    application_id=__this__._application_id,
                    app_internal_authorization=__app_internal_authorization__
                )

                __metadata__ += __headers__.to_grpc_metadata()

                __query_backoff__ = IMPORT_reboot_aio_backoff.Backoff()
                while True:
                    try:
                        async with __context__.channel_manager.get_channel_to_state(
                            IMPORT_reboot_aio_types.StateTypeName('{{ client.proto.state_full_name }}'),
                            __this__._state_ref,
                        ) as __channel__:

                            __call__ = IMPORT_rbt_v1alpha1.react_pb2_grpc.ReactStub(
                                __channel__
                            ).Query(
                                IMPORT_rbt_v1alpha1.react_pb2.QueryRequest(
                                    method='{{ method.proto.name }}',
                                    request=__request__.SerializeToString(),
                                ),
                                metadata=__metadata__,
                            )

                            async for __query_response__ in __call__:
                                # Clear the backoff so we don't wait
                                # as long the next time we get
                                # disconnected.
                                __query_backoff__.clear()

                                # The backend may have sent us this query
                                # response only to let us know that a new
                                # idempotency key has been recorded; there may
                                # not be a new response. Python callers don't
                                # (currently) care about such an event, so we
                                # simply ignore it.
                                if not __query_response__.HasField("response"):
                                    continue

                                __response__ = {{ method.output_type }}()
                                __response__.ParseFromString(__query_response__.response)
                                yield __response__

                    except BaseException as exception:
                        # We expect to get disconnected from the placement
                        # planner from time to time, e.g., when it is
                        # being updated, but we don't want that error to
                        # propagate, we just want to retry.
                        if IMPORT_rebootdev.aio.aborted.is_grpc_retryable_exception(exception):
                            await __query_backoff__()
                            continue
                        raise

            {% endif %}
            {% endfor %}
            {% endfor %}

        def reactively(self):
            return {{ client.proto.state_name }}.WeakReference._Reactively(
                application_id=self._application_id,
                state_ref=self._state_ref,
                bearer_token=self._bearer_token,
            )

        class _Idempotently(IMPORT_typing.Generic[{{ client.proto.state_name }}_IdempotentlyScheduleTypeVar]):

            _weak_reference: {{ client.proto.state_name }}.WeakReference[{{ client.proto.state_name }}_IdempotentlyScheduleTypeVar]

            def __init__(
                self,
                *,
                weak_reference: {{ client.proto.state_name }}.WeakReference[{{ client.proto.state_name }}_IdempotentlyScheduleTypeVar],
                idempotency: IMPORT_reboot_aio_idempotency.Idempotency,
            ):
                self._weak_reference = weak_reference
                self._idempotency = idempotency

            def schedule(
                self,
                *,
                when: IMPORT_typing.Optional[IMPORT_datetime_datetime | IMPORT_datetime_timedelta] = None,
            ) -> {{ client.proto.state_name }}_IdempotentlyScheduleTypeVar:
                return self._weak_reference._schedule_type(
                    self._weak_reference._application_id,
                    self._weak_reference._tasks,
                    when=when,
                    idempotency=self._idempotency,
                )

            def spawn(
                self,
                *,
                when: IMPORT_typing.Optional[IMPORT_datetime_datetime | IMPORT_datetime_timedelta] = None,
            ) -> {{ client.proto.state_name }}.WeakReference._Spawn:
                return {{ client.proto.state_name }}.WeakReference._Spawn(
                    self._weak_reference._application_id,
                    self._weak_reference._tasks,
                    when=when,
                    idempotency=self._idempotency,
                )

            {% for service in client.services %}
            {% for method in service.methods %}
            {% if not method.options.proto.constructor and not method.proto.server_streaming %}
            {% if method.options.proto.kind in ['workflow'] %}
            async def {{ method.proto.name }}(
                # In methods which are dealing with user input, (i.e.,
                # proto message field names), we should use '__double_underscored__'
                # variables to avoid any potential name conflicts with the method's
                # parameters.
                # The '__self__' parameter is a convention in Python to
                # indicate that this method is a bound method, so we use
                # '__this__' instead.
                __this__,
                __context__: IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
                __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
                {% for name, type in method.input_type_fields.items() %}
                {% if loop.first %}
                *,
                {% endif %}
                {{ name }}: IMPORT_typing.Optional[{{ type }}] = None,
                {% endfor %}
            ) -> {{ method.output_type }}:
                # UX improvement: check that neither positional argument was accidentally
                # given a gRPC request type.
                IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type={{ method.input_type }})
                IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type={{ method.input_type }})

                def error_message_supplement():
                    if any([isinstance(__context__, t) for t in [IMPORT_reboot_aio_contexts.WriterContext, IMPORT_reboot_aio_contexts.TransactionContext]]):
                        return f"'{{ method.proto.name }}' is a workflow and must be scheduled from a '{type(__context__).__name__}' via `await [...].schedule([...]).{{ method.proto.name }}(context, [...])`"
                    else:
                        return f"'{{ method.proto.name }}' is a workflow and can not be called from '{type(__context__).__name__}'"

                IMPORT_reboot_aio_types.assert_type(
                    __context__,
                    [
                        IMPORT_reboot_aio_contexts.WorkflowContext,
                        IMPORT_reboot_aio_external.ExternalContext,
                    ],
                    error_message_supplement=error_message_supplement(),
                )

                return await (
                    await __this__.spawn().{{ method.proto.name }}(
                        __context__,
                        __options__,
                        {% for name in method.input_type_fields %}
                        {{ name }}={{ name }},
                        {% endfor %}
                    )
                )

            {% elif method.options.proto.kind in ['writer', 'transaction'] %}
            async def {{ method.proto.name }}(
                # In methods which are dealing with user input, (i.e.,
                # proto message field names), we should use '__double_underscored__'
                # variables to avoid any potential name conflicts with the method's
                # parameters.
                # The '__self__' parameter is a convention in Python to
                # indicate that this method is a bound method, so we use
                # '__this__' instead.
                __this__,
                __context__: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
                __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
                {% for name, type in method.input_type_fields.items() %}
                {% if loop.first %}
                *,
                {% endif %}
                {{ name }}: IMPORT_typing.Optional[{{ type }}] = None,
                {% endfor %}
            ) -> {{ method.output_type }}:
                # UX improvement: check that neither positional argument was accidentally
                # given a gRPC request type.
                IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type={{ method.input_type }})
                IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type={{ method.input_type }})

                IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                if __options__.idempotency is not None:
                    raise RuntimeError(
                        'Found redundant idempotency in `Options`'
                    )

                __options__ = IMPORT_dataclasses.replace(
                    __options__,
                    idempotency_key=__this__._idempotency.key,
                    idempotency_alias=__this__._idempotency.alias,
                    generate_idempotency=__this__._idempotency.generate,
                )

                return await __this__._weak_reference.{{ method.proto.name }}(
                    __context__,
                    __options__,
                    {% for name in method.input_type_fields %}
                    {{ name }}={{ name }},
                    {% endfor %}
                )

            {% endif %}
            {% endif %}
            {% endfor %}
            {% endfor %}

        def idempotently(
            self,
            alias: IMPORT_typing.Optional[str] = None,
            *,
            key: IMPORT_typing.Optional[IMPORT_uuid.UUID] = None,
            each_iteration: IMPORT_typing.Optional[bool] = None,
        ) -> {{ client.proto.state_name }}.WeakReference._Idempotently[{{ client.proto.state_name }}_ScheduleTypeVar]:
            return {{ client.proto.state_name }}.WeakReference._Idempotently(
                weak_reference=self,
                idempotency=IMPORT_reboot_aio_contexts.Context.idempotency(
                    key=key, alias=alias, each_iteration=each_iteration
                )
            )

        def unidempotently(self):
            return self.idempotently(key=IMPORT_uuid.uuid4())

        def schedule(
            self,
            *,
            when: IMPORT_typing.Optional[IMPORT_datetime_datetime | IMPORT_datetime_timedelta] = None,
        ) -> {{ client.proto.state_name }}_ScheduleTypeVar:
            return self._schedule_type(self._application_id, self._tasks, when=when)

        class _Schedule:

            def __init__(
                self,
                application_id: IMPORT_typing.Optional[IMPORT_reboot_aio_types.ApplicationId],
                tasks: IMPORT_typing.Callable[[IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext], {{ client.proto.state_name }}TasksStub],
                *,
                when: IMPORT_typing.Optional[IMPORT_datetime_datetime | IMPORT_datetime_timedelta] = None,
                idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
            ) -> None:
                self._application_id = application_id
                self._tasks = tasks
                self._when = ensure_has_timezone(when=when)
                self._idempotency = idempotency

            # {{ client.proto.state_name }} callable tasks:
            {% for service in client.services %}
            {% for method in service.methods %}
            {# NOTE: We could in theory support scheduling constructors: see #3038. #}
            {% if not method.options.proto.constructor and not method.proto.server_streaming %}
            async def {{ method.proto.name }}(
                __this__,
                __context__: IMPORT_reboot_aio_contexts.TransactionContext,
                __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
                {% for name, type in method.input_type_fields.items() %}
                {% if loop.first %}
                *,
                {% endif %}
                {{ name }}: IMPORT_typing.Optional[{{ type }}] = None,
                {% endfor %}
            ) -> IMPORT_rbt_v1alpha1.tasks_pb2.TaskId:
                # UX improvement: check that neither positional argument was accidentally
                # given a gRPC request type.
                IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type={{ method.input_type }})
                IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type={{ method.input_type }})
                IMPORT_reboot_aio_types.assert_type(__context__, [IMPORT_reboot_aio_contexts.TransactionContext])

                {% for name, type in method.input_type_fields.items() %}
                if {{ name }} is not None and not isinstance(
                    {{ name }},
                    {# NOTE: split at '[' so we don't include generic type parameters. #}
                    {{ type.split('[')[0] }},
                ):
                    raise TypeError(
                        f"Can not construct protobuf message of type "
                        f"'{{ method.input_type }}': field '{{ name }}' is not "
                        {# This code calls many types `IMPORT_...`, but the customer doesn't use that prefix #}
                        f"of required type '{{ type.removeprefix('IMPORT_') }}'"
                    )
                {% endfor %}
                # TODO: mypy-protobuf declares that
                # `IMPORT_google_protobuf_message.Message` constructor arguments are
                # always non-None, when in reality they are optional.
                __request__ = {{ method.input_type }}(
                    {% for name in method.input_type_fields %}
                    {{ name }}={{ name }},  # type: ignore[arg-type]
                    {% endfor %}
                )

                __schedule__: IMPORT_typing.Optional[IMPORT_reboot_time_DateTimeWithTimeZone] = (IMPORT_reboot_time_DateTimeWithTimeZone.now() + __this__._when) if isinstance(
                    __this__._when, IMPORT_datetime_timedelta
                ) else __this__._when

                __metadata__: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None
                __idempotency__: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = __this__._idempotency
                __bearer_token__: IMPORT_typing.Optional[str] = None

                if __options__ is not None:
                    IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                    if __options__.idempotency:
                        if __idempotency__ is not None:
                            raise RuntimeError(
                                'Found redundant idempotency in `Options`'
                            )
                        __idempotency__ = __options__.idempotency
                    if __options__.metadata is not None:
                        __metadata__ = __options__.metadata
                    if __options__.bearer_token is not None:
                        __bearer_token__ = __options__.bearer_token

                # Add scheduling information to the metadata.
                __metadata__ = (
                    (IMPORT_reboot_aio_headers.TASK_SCHEDULE,
                    __schedule__.isoformat() if __schedule__ else ''),
                ) + (__metadata__ or tuple())

                __task_id__ = await __this__._tasks(
                    __context__
                ).{{ method.proto.name }}(
                    __request__,
                    idempotency=__idempotency__,
                    metadata=__metadata__,
                    bearer_token=__bearer_token__,
                )

                return __task_id__

            {% endif %}
            {% endfor %}
            {% endfor %}

        # A `WriterContext` can not call any methods in `_Schedule` to
        # prevent a writer from doing a `Foo.ref()` and trying to
        # schedule. However, we want to allow a writer to schedule
        # when we are constructing a `WeakReference` from
        # `self.ref()` so instead we return a `_WriterSchedule` to
        # provide type safety that allows a `WriterContext` to
        # schedule (for itself).
        class _WriterSchedule:

            def __init__(
                self,
                application_id: IMPORT_typing.Optional[IMPORT_reboot_aio_types.ApplicationId],
                tasks: IMPORT_typing.Callable[[IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext], {{ client.proto.state_name }}TasksStub],
                *,
                when: IMPORT_typing.Optional[IMPORT_datetime_datetime | IMPORT_datetime_timedelta] = None,
                idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
            ) -> None:
                self._tasks = tasks
                self._when = ensure_has_timezone(when=when)
                self._idempotency = idempotency

            # {{ client.proto.state_name }} callable tasks:
            {% for service in client.services %}
            {% for method in service.methods %}
            {# NOTE: We could in theory support scheduling constructors: see #3038. #}
            {% if not method.options.proto.constructor and not method.proto.server_streaming %}
            async def {{ method.proto.name }}(
                __this__,
                __context__: IMPORT_reboot_aio_contexts.WriterContext | IMPORT_reboot_aio_contexts.TransactionContext,
                __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
                {% for name, type in method.input_type_fields.items() %}
                {% if loop.first %}
                *,
                {% endif %}
                {{ name }}: IMPORT_typing.Optional[{{ type }}] = None,
                {% endfor %}
            ) -> IMPORT_rbt_v1alpha1.tasks_pb2.TaskId:
                # Only `writer`s and `transaction`s should ``schedule()`, a
                # `workflow` should `spawn()`.
                IMPORT_reboot_aio_types.assert_type(__context__, [IMPORT_reboot_aio_contexts.WriterContext, IMPORT_reboot_aio_contexts.TransactionContext])

                # UX improvement: check that neither positional argument was accidentally
                # given a gRPC request type.
                IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type={{ method.input_type }})
                IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type={{ method.input_type }})

                {% for name, type in method.input_type_fields.items() %}
                if {{ name }} is not None and not isinstance(
                    {{ name }},
                    {# NOTE: split at '[' so we don't include generic type parameters. #}
                    {{ type.split('[')[0] }},
                ):
                    raise TypeError(
                        f"Can not construct protobuf message of type "
                        f"'{{ method.input_type }}': field '{{ name }}' is not "
                        {# This code calls many types `IMPORT_...`, but the customer doesn't use that prefix #}
                        f"of required type '{{ type.removeprefix('IMPORT_') }}'"
                    )
                {% endfor %}
                # TODO: mypy-protobuf declares that
                # `google.protobuf.message.Message` constructor arguments are
                # always non-None, when in reality they are optional.
                __request__ = {{ method.input_type }}(
                    {% for name in method.input_type_fields %}
                    {{ name }}={{ name }},  # type: ignore[arg-type]
                    {% endfor %}
                )
                if isinstance(__context__, IMPORT_reboot_aio_contexts.WriterContext):
                    return {{ client.proto.state_name }}ServicerTasksStub(
                        context=__context__,
                        state_ref=__context__._state_ref,
                    ).{{ method.proto.name }}(
                        __request__,
                        schedule=__this__._when,
                    ).task_id

                __schedule__: IMPORT_typing.Optional[IMPORT_reboot_time_DateTimeWithTimeZone] = (IMPORT_reboot_time_DateTimeWithTimeZone.now() + __this__._when) if isinstance(
                    __this__._when, IMPORT_datetime_timedelta
                ) else __this__._when

                __metadata__: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None
                __idempotency__: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = __this__._idempotency
                __bearer_token__: IMPORT_typing.Optional[str] = None

                if __options__ is not None:
                    IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                    if __options__.idempotency is not None:
                        if __idempotency__ is not None:
                            raise RuntimeError(
                                'Found redundant idempotency in `Options`'
                            )
                        __idempotency__ = __options__.idempotency
                    if __options__.metadata is not None:
                        __metadata__ = __options__.metadata
                    if __options__.bearer_token is not None:
                        __bearer_token__ = __options__.bearer_token

                # Add scheduling information to the metadata.
                __metadata__ = (
                    (IMPORT_reboot_aio_headers.TASK_SCHEDULE,
                    __schedule__.isoformat() if __schedule__ else ''),
                ) + (__metadata__ or tuple())

                return await __this__._tasks(
                    __context__
                ).{{ method.proto.name }}(
                    __request__,
                    idempotency=__idempotency__,
                    metadata=__metadata__,
                    bearer_token=__bearer_token__,
                )

            {% endif %}
            {% endfor %}
            {% endfor %}

        def spawn(
            self,
            *,
            when: IMPORT_typing.Optional[IMPORT_datetime_datetime | IMPORT_datetime_timedelta] = None,
        ) -> {{ client.proto.state_name }}.WeakReference._Spawn:
            return {{ client.proto.state_name }}.WeakReference._Spawn(
                self._application_id, self._tasks, when=when
            )

        class _Spawn:

            def __init__(
                self,
                application_id: IMPORT_typing.Optional[IMPORT_reboot_aio_types.ApplicationId],
                tasks: IMPORT_typing.Callable[[IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext], {{ client.proto.state_name }}TasksStub],
                *,
                when: IMPORT_typing.Optional[IMPORT_datetime_datetime | IMPORT_datetime_timedelta] = None,
                idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
            ) -> None:
                self._application_id = application_id
                self._tasks = tasks
                self._when = ensure_has_timezone(when=when)
                self._idempotency = idempotency

            # {{ client.proto.state_name }} callable tasks:
            {% for service in client.services %}
            {% for method in service.methods %}
            {# NOTE: We could in theory support scheduling constructors: see #3038. #}
            {% if not method.options.proto.constructor and not method.proto.server_streaming %}
            async def {{ method.proto.name }}(
                __this__,
                __context__: IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
                __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
                {% for name, type in method.input_type_fields.items() %}
                {% if loop.first %}
                *,
                {% endif %}
                {{ name }}: IMPORT_typing.Optional[{{ type }}] = None,
                {% endfor %}
            ) -> {{ client.proto.state_name }}.{{ method.proto.name }}Task:
                # UX improvement: check that neither positional argument was accidentally
                # given a gRPC request type.
                IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type={{ method.input_type }})
                IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type={{ method.input_type }})
                IMPORT_reboot_aio_types.assert_type(__context__, [IMPORT_reboot_aio_contexts.WorkflowContext, IMPORT_reboot_aio_external.ExternalContext])

                {% for name, type in method.input_type_fields.items() %}
                if {{ name }} is not None and not isinstance(
                    {{ name }},
                    {# NOTE: split at '[' so we don't include generic type parameters. #}
                    {{ type.split('[')[0] }},
                ):
                    raise TypeError(
                        f"Can not construct protobuf message of type "
                        f"'{{ method.input_type }}': field '{{ name }}' is not "
                        {# This code calls many types `IMPORT_...`, but the customer doesn't use that prefix #}
                        f"of required type '{{ type.removeprefix('IMPORT_') }}'"
                    )
                {% endfor %}
                # TODO: mypy-protobuf declares that
                # `IMPORT_google_protobuf_message.Message` constructor arguments are
                # always non-None, when in reality they are optional.
                __request__ = {{ method.input_type }}(
                    {% for name in method.input_type_fields %}
                    {{ name }}={{ name }},  # type: ignore[arg-type]
                    {% endfor %}
                )

                __schedule__: IMPORT_typing.Optional[IMPORT_reboot_time_DateTimeWithTimeZone] = (IMPORT_reboot_time_DateTimeWithTimeZone.now() + __this__._when) if isinstance(
                    __this__._when, IMPORT_datetime_timedelta
                ) else __this__._when

                __metadata__: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None
                __idempotency__: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = __this__._idempotency
                __bearer_token__: IMPORT_typing.Optional[str] = None

                if __options__ is not None:
                    IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                    if __options__.idempotency:
                        if __idempotency__ is not None:
                            raise RuntimeError(
                                'Found redundant idempotency in `Options`'
                            )
                        __idempotency__ = __options__.idempotency
                    if __options__.metadata is not None:
                        __metadata__ = __options__.metadata
                    if __options__.bearer_token is not None:
                        __bearer_token__ = __options__.bearer_token

                # Add scheduling information to the metadata.
                __metadata__ = (
                    (IMPORT_reboot_aio_headers.TASK_SCHEDULE,
                    __schedule__.isoformat() if __schedule__ else ''),
                ) + (__metadata__ or tuple())

                __task_id__ = await __this__._tasks(
                    __context__
                ).{{ method.proto.name }}(
                    __request__,
                    idempotency=__idempotency__,
                    metadata=__metadata__,
                    bearer_token=__bearer_token__,
                )

                return {{ client.proto.state_name }}.{{ method.proto.name }}Task(
                    __context__,
                    task_id=__task_id__,
                )

            {% endif %}
            {% endfor %}
            {% endfor %}

        # {{ client.proto.state_name }} specific methods:
        {% for service in client.services %}
        {% for method in service.methods %}
        {% if not method.options.proto.constructor %}
        {%- if method.options.proto.kind in ['workflow'] %}
        async def {{ method.proto.name }}(
            # In methods which are dealing with user input, (i.e.,
            # proto message field names), we should use '__double_underscored__'
            # variables to avoid any potential name conflicts with the method's
            # parameters.
            # The '__self__' parameter is a convention in Python to
            # indicate that this method is a bound method, so we use
            # '__this__' instead.
            __this__,
            __context__: IMPORT_reboot_aio_external.ExternalContext,
            __options__: IMPORT_reboot_aio_call.Options = IMPORT_reboot_aio_call.Options(),
            {% for name, type in method.input_type_fields.items() %}
            {% if loop.first %}
            *,
            {% endif %}
            {{ name }}: IMPORT_typing.Optional[{{ type }}] = None,
            {% endfor %}
        ) -> {{ method.output_type }}:
            # UX improvement: check that neither positional argument was accidentally
            # given a gRPC request type.
            IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type={{ method.input_type }})
            IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type={{ method.input_type }})

            def error_message_supplement():
                if any([isinstance(__context__, t) for t in [IMPORT_reboot_aio_contexts.WriterContext, IMPORT_reboot_aio_contexts.TransactionContext]]):
                    return f"'{{ method.proto.name }}' is a workflow and must be scheduled from a '{type(__context__).__name__}' via `await [...].schedule([...]).{{ method.proto.name }}(context, [...])`"
                elif isinstance(__context__, IMPORT_reboot_aio_contexts.WorkflowContext):
                    return f"'{{ method.proto.name }}' is a workflow and must be scheduled from a '{type(__context__).__name__}' via `await [...].idempotently([...]).spawn([...]).{{ method.proto.name }}(context, [...])`"
                else:
                    return f"'{{ method.proto.name }}' is a workflow and can not be called from '{type(__context__).__name__}'"

            IMPORT_reboot_aio_types.assert_type(
                __context__,
                [IMPORT_reboot_aio_external.ExternalContext],
                error_message_supplement=error_message_supplement(),
            )

            return await (
                await __this__.spawn().{{ method.proto.name }}(
                    __context__,
                    __options__,
                    {% for name in method.input_type_fields %}
                    {{ name }}={{ name }},
                    {% endfor %}
                )
            )
        {% elif method.options.proto.kind == 'reader' %}
        async def {{ method.proto.name }}(
            __this__,
            __context__: IMPORT_reboot_aio_contexts.ReaderContext | IMPORT_reboot_aio_contexts.WriterContext | IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
            __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
            {% if not method.proto.client_streaming %}
            {% for name, type in method.input_type_fields.items() %}
            {% if loop.first %}
            *,
            {% endif %}
            {{ name }}: IMPORT_typing.Optional[{{ type }}] = None,
            {% endfor %}
            {% else %}
            *,
            __requests__: IMPORT_typing.AsyncIterable[{{ method.input_type }}],
            {% endif %}
        {% if not method.proto.server_streaming %}
        ) -> {{ method.output_type }}:
        {% else %}
        ) -> IMPORT_typing.AsyncIterable[{{ method.output_type }}]:
        {% endif %}
            # UX improvement: check that neither positional argument was accidentally
            # given a gRPC request type.
            IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type={{ method.input_type }})
            IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type={{ method.input_type }})

            {% if not method.proto.client_streaming %}
            {% for name, type in method.input_type_fields.items() %}
            if {{ name }} is not None and not isinstance(
                {{ name }},
                {# NOTE: split at '[' so we don't include generic type parameters. #}
                {{ type.split('[')[0] }},
            ):
                raise TypeError(
                    f"Can not construct protobuf message of type "
                    f"'{{ method.input_type }}': field '{{ name }}' is not "
                    {# This code calls many types `IMPORT_...`, but the customer doesn't use that prefix #}
                    f"of required type '{{ type.removeprefix('IMPORT_') }}'"
                )
            {% endfor %}
            # TODO: mypy-protobuf declares that
            # `google.protobuf.message.Message` constructor arguments are
            # always non-None, when in reality they are optional.
            __request__ = {{ method.input_type }}(
                {% for name in method.input_type_fields %}
                {{ name }}={{ name }},  # type: ignore[arg-type]
                {% endfor %}
            )
            {% endif %}
            __metadata__: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None
            __bearer_token__: IMPORT_typing.Optional[str] = None
            if __options__ is not None:
                IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                if __options__.metadata is not None:
                    __metadata__ = __options__.metadata
                if __options__.bearer_token is not None:
                    __bearer_token__ = __options__.bearer_token
            {% if not method.proto.server_streaming %}
            return await __this__._reader(__context__).{{ method.proto.name }}(
                __request{% if method.proto.client_streaming %}s__{% else %}__{% endif %},
                metadata=__metadata__,
                bearer_token=__bearer_token__,
            )
            {% else %}
            __call__ = __this__._reader(__context__).{{ method.proto.name }}(
                __request{% if method.proto.client_streaming %}s__{% else %}__{% endif %},
                metadata=__metadata__,
            )
            async for __response__ in __call__:
                yield __response__
            {% endif %}
        {% elif method.options.proto.kind in ['transaction', 'writer'] %}
        async def {{ method.proto.name }}(
            __this__,
            __context__: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
            __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
            {% for name, type in method.input_type_fields.items() %}
            {% if loop.first %}
            *,
            {% endif %}
            {{ name }}: IMPORT_typing.Optional[{{ type }}] = None,
            {% endfor %}
        ) -> {{ method.output_type }}:
            # UX improvement: check that neither positional argument was accidentally
            # given a gRPC request type.
            IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type={{ method.input_type }})
            IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type={{ method.input_type }})

            {% for name, type in method.input_type_fields.items() %}
            if {{ name }} is not None and not isinstance(
                {{ name }},
                {# NOTE: split at '[' so we don't include generic type parameters. #}
                {{ type.split('[')[0] }},
            ):
                raise TypeError(
                    f"Can not construct protobuf message of type "
                    f"'{{ method.input_type }}': field '{{ name }}' is not "
                    {# This code calls many types `IMPORT_...`, but the customer doesn't use that prefix #}
                    f"of required type '{{ type.removeprefix('IMPORT_') }}'"
                )
            {% endfor %}
            # TODO: mypy-protobuf declares that
            # `google.protobuf.message.Message` constructor arguments are
            # always non-None, when in reality they are optional.
            __request__ = {{ method.input_type }}(
                {% for name in method.input_type_fields %}
                {{ name }}={{ name }},  # type: ignore[arg-type]
                {% endfor %}
            )
            __idempotency__: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None
            __metadata__: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None
            __bearer_token__: IMPORT_typing.Optional[str] = None
            if __options__ is not None:
                IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
                if __options__.idempotency is not None:
                    __idempotency__ = __options__.idempotency
                if __options__.metadata is not None:
                    __metadata__ = __options__.metadata
                if __options__.bearer_token is not None:
                    __bearer_token__ = __options__.bearer_token

            {% if method.options.proto.kind == 'writer' %}
            return await __this__._writer(__context__).{{ method.proto.name }}(
                __request__,
                idempotency=__idempotency__,
                metadata=__metadata__,
                bearer_token=__bearer_token__,
            )
            {% elif method.options.proto.kind == 'transaction' %}
            return await __this__._workflow(__context__).{{ method.proto.name }}(
                __request__,
                idempotency=__idempotency__,
                metadata=__metadata__,
                bearer_token=__bearer_token__,
            )
            {% endif %}

        {% endif %}
        {% endif %}
        {% endfor %}
        {% endfor %}

    @classmethod
    def ref(
        cls,
        state_id: IMPORT_reboot_aio_types.StateId,
        *,
        bearer_token: IMPORT_typing.Optional[str] = None,
    ) -> {{ client.proto.state_name }}.WeakReference[{{ client.proto.state_name }}.WeakReference._Schedule]:
        return {{ client.proto.state_name }}.WeakReference(
            # TODO(https://github.com/reboot-dev/mono/issues/3226): add support for calling other applications.
            # For now this always stays within the application that creates the context.
            application_id=None,
            state_id=state_id,
            schedule_type={{ client.proto.state_name }}.WeakReference._Schedule,
            bearer_token=bearer_token,
        )

    {% for service in client.services %}
    {% for method in service.methods %}
    {%- if method.options.proto.kind == 'workflow' %}
    {# TODO(benh): support constructor "tasks" and workflows. #}
    {%- else %}
    {% if method.options.proto.constructor %}
    @classmethod
    async def {{ method.proto.name }}(
        __cls__,
        __context__: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        __state_id__: IMPORT_typing.Optional[IMPORT_reboot_aio_types.StateId] = None,
        __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
        __idempotency__: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None,
        {% for name, type in method.input_type_fields.items() %}
        {% if loop.first %}
        *,
        {% endif %}
        {{ name }}: IMPORT_typing.Optional[{{ type }}] = None,
        {% endfor %}
    ) -> tuple[{{ client.proto.state_name }}.WeakReference, {{ method.output_type }}]:
        {% for name, type in method.input_type_fields.items() %}
        if {{ name }} is not None and not isinstance(
            {{ name }},
            {# NOTE: split at '[' so we don't include generic type parameters. #}
            {{ type.split('[')[0] }},
        ):
            raise TypeError(
                f"Can not construct protobuf message of type "
                f"'{{ method.input_type }}': field '{{ name }}' is not "
                {# This code calls many types `IMPORT_...`, but the customer doesn't use that prefix #}
                f"of required type '{{ type.removeprefix('IMPORT_') }}'"
            )
        {% endfor %}
        # TODO: mypy-protobuf declares that
        # `google.protobuf.message.Message` constructor arguments are
        # always non-None, when in reality they are optional.
        __request__ = {{ method.input_type }}(
            {% for name in method.input_type_fields %}
            {{ name }}={{ name }},  # type: ignore[arg-type]
            {% endfor %}
        )

        __metadata__: IMPORT_typing.Optional[IMPORT_reboot_aio_types.GrpcMetadata] = None
        __bearer_token__: IMPORT_typing.Optional[str] = None

        if __options__ is not None:
            IMPORT_reboot_aio_types.assert_type(__options__, [IMPORT_reboot_aio_call.Options])
            if __options__.idempotency is not None:
                if __idempotency__ is not None:
                    raise RuntimeError(
                        'Found redundant idempotency in `Options`'
                    )
                __idempotency__ = __options__.idempotency
            if __options__.metadata is not None:
                __metadata__ = __options__.metadata
            if __options__.bearer_token is not None:
                __bearer_token__ = __options__.bearer_token

        if __state_id__ is None:
            if __idempotency__ is None:
                __state_id__ = str(IMPORT_uuid.uuid4())
            else:
                __state_id__ = __context__.generate_idempotent_state_id(
                    state_type_name=__cls__.__state_type_name__,
                    service_name=IMPORT_reboot_aio_types.ServiceName('{{ service.proto.full_name }}'),
                    method='{{ method.proto.name }}',
                    idempotency=__idempotency__,
                )

        __reference__ = {{ client.proto.state_name }}.ref(
            __state_id__, bearer_token=__bearer_token__
        )
        {% if method.options.proto.kind == 'writer' %}
        __stub__ = __reference__._writer(__context__)
        {% elif method.options.proto.kind == 'transaction' %}
        __stub__ = __reference__._workflow(__context__)
        {% endif %}
        return (
            __reference__,
            await __stub__.{{ method.proto.name }}(
                __request__,
                idempotency=__idempotency__,
                metadata=__metadata__,
                bearer_token=__bearer_token__,
            )
        )

    {% endif %}
    {% endif %}
    {% endfor %}
    {% endfor %}

    @IMPORT_typing.overload
    @classmethod
    def idempotently(cls, alias: IMPORT_typing.Optional[str] = None, *, each_iteration: bool = False) -> {{ client.proto.state_name }}._ConstructIdempotently:
        ...

    @IMPORT_typing.overload
    @classmethod
    def idempotently(cls, *, key: IMPORT_uuid.UUID) -> {{ client.proto.state_name }}._ConstructIdempotently:
        ...

    @classmethod
    def idempotently(
        cls,
        alias: IMPORT_typing.Optional[str] = None,
        *,
        key: IMPORT_typing.Optional[IMPORT_uuid.UUID] = None,
        each_iteration: IMPORT_typing.Optional[bool] = None,
    ) -> {{ client.proto.state_name }}._ConstructIdempotently:
        return {{ client.proto.state_name }}._ConstructIdempotently(
            _idempotency=IMPORT_reboot_aio_contexts.Context.idempotency(
                alias=alias, key=key, each_iteration=each_iteration
            ),
        )

    @IMPORT_dataclasses.dataclass(frozen=True)
    class _ConstructIdempotently:

        _idempotency: IMPORT_reboot_aio_idempotency.Idempotency

        {% for service in client.services %}
        {% for method in service.methods %}
        {%- if method.options.proto.kind == 'workflow' %}
        {# TODO(benh): support constructor "tasks" and workflows. #}
        {%- else %}
        {% if method.options.proto.constructor %}
        async def {{ method.proto.name }}(
            __this__,
            __context__: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
            __state_id__: IMPORT_typing.Optional[IMPORT_reboot_aio_types.StateId] = None,
            __options__: IMPORT_typing.Optional[IMPORT_reboot_aio_call.Options] = None,
            {% for name, type in method.input_type_fields.items() %}
            {% if loop.first %}
            *,
            {% endif %}
            {{ name }}: IMPORT_typing.Optional[{{ type }}] = None,
            {% endfor %}
        ) -> tuple[{{ client.proto.state_name }}.WeakReference, {{ method.output_type }}]:
            # UX improvement: check that neither positional argument was accidentally
            # given a gRPC request type.
            IMPORT_reboot_aio_types.assert_not_request_type(__context__, request_type={{ method.input_type }})
            IMPORT_reboot_aio_types.assert_not_request_type(__options__, request_type={{ method.input_type }})

            return await {{ client.proto.state_name }}.{{ method.proto.name }}(
                __context__=__context__,
                __state_id__=__state_id__,
                __options__=__options__,
                __idempotency__=__this__._idempotency,
                {% for name in method.input_type_fields %}
                {{ name }}={{ name }},
                {% endfor %}
            )

        {% endif %}
        {% endif %}
        {% endfor %}
        {% endfor %}

{% endfor %}

############################ Servicer Node adapters ############################
# Used by Node.js servicer implementations to access Python code and vice-versa.
# Relevant to servicers, irrelevant to clients.

{% for state in states %}
class {{ state.proto.name }}ServicerNodeAdaptor({{ state.proto.name }}.Servicer):

    async def _wait_for_cancelled(
        self,
        future: IMPORT_asyncio.Future,
        method: str,
    ):
        while True:
            done, pending = await IMPORT_asyncio.wait(
                [future],
                timeout=5,  # seconds
            )
            # Check if we've timed out and log a warning that their
            # call has been cancelled but it is still running.
            if len(done) == 0:
                logger.warning(
                    f"Call to method '{method}' has been cancelled by the caller, "
                    "BUT WE ARE STILL WAITING for it complete. You can use the promise "
                    "`context.cancelled` to check if the caller has cancelled so you "
                    "don't do unnecessary work or wait for something that may never occur."
                )
                continue
            break

        # Now need to actually `await` the future so that we don't
        # have an unretrieved exception that gets logged.
        #
        # NOTE: this will raise an exception if the method raised even
        # though the call has already been cancelled but it makes it
        # more clear that the method raised so that is why we're not
        # catching and swallowing any exception.
        await future

    def __init__(self):
        self._js_servicer_reference = self._construct_js_servicer()  # type: ignore[attr-defined]

    def authorizer(self) -> IMPORT_typing.Optional[IMPORT_rebootdev.aio.auth.authorizers.Authorizer]:
        return self._construct_authorizer(self._js_servicer_reference)  # type: ignore[attr-defined]

    async def _read(self, context: IMPORT_reboot_aio_contexts.WorkflowContext) -> str:
        return IMPORT_google_protobuf_json_format.MessageToJson(
            await super().state.read(context)
        )

    async def _write(
        self,
        context: IMPORT_reboot_aio_contexts.WorkflowContext,
        writer: IMPORT_typing.Callable[[str], IMPORT_typing.Awaitable[str]],
        json_options: str,
    ) -> str:

        async def _writer(state: IMPORT_google_protobuf_message.Message):
            json_result_state = await writer(
                IMPORT_google_protobuf_json_format.MessageToJson(state)
            )

            result_state = IMPORT_json.loads(json_result_state)

            state.CopyFrom(
                IMPORT_google_protobuf_json_format.ParseDict(
                    result_state['state'],
                    self.__state_type__(),
                )
            )

            assert 'result' in result_state
            result = result_state['result']
            assert type(result) == str
            return result

        options = IMPORT_json.loads(json_options)

        assert 'idempotency' in options

        return await super().state.idempotently(
            alias=options['idempotency'].get('alias'),
            key=options['idempotency'].get('key'),
            each_iteration=options['idempotency'].get('eachIteration', None),
        )._write(
            context,
            _writer,
            type_result=str,
            check_type=True,
            unidempotently=options.get('unidempotently', False),
        )

    # {{ state.proto.name }} specific methods:
    {% for service in state.services %}
    {% for method in service.methods %}
    {% if method.options.proto.kind == 'reader' %}
    async def {{ method.proto.name }}(
        self,
        context: IMPORT_reboot_aio_contexts.ReaderContext,
        {% if not method.options.proto.state_streaming %}
        state: {{ state.pb2_name }}.{{ state.proto.name }},
        {% else %}
        states: IMPORT_typing.AsyncIterable[{{ state.pb2_name }}.{{ state.proto.name }}],
        {% endif %}
        {% if not method.proto.client_streaming %}
        request: {{ method.input_type }},
        {% else %}
        requests: IMPORT_typing.AsyncIterable[{{ method.input_type }}],
        {% endif %}
    {% if not method.proto.server_streaming %}
    ) -> {{ method.output_type }}:
    {% else %}
    ) -> IMPORT_typing.AsyncIterable[{{ method.output_type }}]:
    {% endif %}
        {% if method.proto.client_streaming or method.options.proto.state_streaming or method.proto.server_streaming %}
        raise NotImplementedError
        {% else %}
        json_state = IMPORT_google_protobuf_json_format.MessageToJson(state)
        json_request = IMPORT_google_protobuf_json_format.MessageToJson(request)

        cancelled: IMPORT_asyncio.Future[None] = IMPORT_asyncio.Future()

        json_result_future: IMPORT_typing.Optional[IMPORT_asyncio.Future[str]] = None

        try:
            json_result_future = self._trampoline(  # type: ignore[attr-defined]
                self._js_servicer_reference,
                '{{ method.options.proto.kind }}',
                '{{ method.proto.name }}',
                context,
                cancelled,
                json_state,
                json_request,
            )
            # NOTE: we need to `asyncio.shield` so that we can still
            # correctly wait for this future to complete even if we
            # are cancelled.
            assert json_result_future is not None
            json_result = await IMPORT_asyncio.shield(json_result_future)
        except IMPORT_asyncio.CancelledError:
            cancelled.set_result(None)

            # NOTE: unlike for a `writer` or `transaction`, we DO NOT
            # _need_ to wait for `json_result_future` because this is a
            # reader and we can execute multiple readers
            # simultaneously. That being said, we still want to give
            # good feedback that the RPC has been cancelled, and there
            # is no harm waiting because other readers can still be
            # called.
            if json_result_future is not None:
                await self._wait_for_cancelled(
                    json_result_future,
                    '{{ state.proto.name }}.{{ method.proto.name }}',
                )

            raise
        except:
            # Make sure we cancel the `cancelled` future either if an
            # exception is thrown or if the result is reeturned so
            # that we don't keep around resources related to it that
            # might cause us to run out of memory or worse, keep Node
            # from exiting because it is waiting for Python.
            cancelled.cancel()
            raise
        else:
            cancelled.cancel()

            result = IMPORT_json.loads(json_result)

            if 'response' in result:
                return IMPORT_google_protobuf_json_format.ParseDict(
                    result['response'],
                    {{ method.output_type }}(),
                )
            elif 'status' in result:
                raise (
                    {{ state.proto.name }}
                    .{{ method.proto.name }}Aborted
                    .from_status(
                        IMPORT_google_protobuf_json_format.ParseDict(
                            result['status'],
                            IMPORT_google_rpc_status_pb2.Status(),
                        )
                    )
                )
        {% endif %}
        {% if method.proto.server_streaming %}
        yield  # Necessary for type checking.
        {% endif %}
    {% elif method.options.proto.kind in ['writer', 'transaction'] %}
    async def {{ method.proto.name }}(
        self,
        {% if method.options.proto.kind == 'writer' %}
        context: IMPORT_reboot_aio_contexts.WriterContext,
        {% elif method.options.proto.kind == 'transaction' %}
        context: IMPORT_reboot_aio_contexts.TransactionContext,
        {% endif %}
        state: {{ state.pb2_name }}.{{ state.proto.name }},
        request: {{ method.input_type }},
    ) -> {{ method.output_type }}:
        json_state = IMPORT_google_protobuf_json_format.MessageToJson(state)
        json_request = IMPORT_google_protobuf_json_format.MessageToJson(request)

        cancelled: IMPORT_asyncio.Future[None] = IMPORT_asyncio.Future()

        json_result_future: IMPORT_typing.Optional[IMPORT_asyncio.Future[str]] = None

        try:
            json_result_future = self._trampoline(  # type: ignore[attr-defined]
                self._js_servicer_reference,
                '{{ method.options.proto.kind }}',
                '{{ method.proto.name }}',
                context,
                cancelled,
                json_state,
                json_request,
            )
            # NOTE: we need to `asyncio.shield` so that we can still
            # correctly wait for this future to complete even if we
            # are cancelled.
            assert json_result_future is not None
            json_result = await IMPORT_asyncio.shield(json_result_future)
        except IMPORT_asyncio.CancelledError:
            cancelled.set_result(None)

            # NOTE: we MUST wait for `json_result_future` because this
            # is a `writer` or `transaction` and we CAN NOT execute
            # multiple simultaneously.
            if json_result_future is not None:
                await self._wait_for_cancelled(
                    json_result_future,
                    '{{ state.proto.name }}.{{ method.proto.name }}',
                )

            raise
        except:
            # Make sure we cancel the `cancelled` future either if an
            # exception is thrown or if the result is reeturned so
            # that we don't keep around resources related to it that
            # might cause us to run out of memory or worse, keep Node
            # from exiting because it is waiting for Python.
            cancelled.cancel()
            raise
        else:
            cancelled.cancel()

            result = IMPORT_json.loads(json_result)

            if 'effects' in result:
                effects = result['effects']

                state.CopyFrom(
                    IMPORT_google_protobuf_json_format.ParseDict(
                        effects['state'],
                        {{ state.pb2_name }}.{{ state.proto.name }}(),
                    )
                )

                assert not hasattr(effects, 'tasks'), "JS tasks not yet implemented"

                return IMPORT_google_protobuf_json_format.ParseDict(
                    effects['response'],
                    {{ method.output_type }}(),
                )
            elif 'status' in result:
                raise (
                    {{ state.proto.name }}
                    .{{ method.proto.name }}Aborted
                    .from_status(
                        IMPORT_google_protobuf_json_format.ParseDict(
                            result['status'],
                            IMPORT_google_rpc_status_pb2.Status(),
                        )
                    )
                )
    {% elif method.options.proto.kind == 'workflow' %}
    async def {{ method.proto.name }}(
        self,
        context: IMPORT_reboot_aio_contexts.WorkflowContext,
        request: {{ method.input_type }},
    ) -> {{ method.output_type }} | IMPORT_reboot_aio_tasks.Loop:
        json_request = IMPORT_google_protobuf_json_format.MessageToJson(request)

        cancelled: IMPORT_asyncio.Future[None] = IMPORT_asyncio.Future()

        json_result_future: IMPORT_typing.Optional[IMPORT_asyncio.Future[str]] = None

        try:
            json_result_future = self._trampoline(  # type: ignore[attr-defined]
                self._js_servicer_reference,
                '{{ method.options.proto.kind }}',
                '{{ method.proto.name }}',
                context,
                cancelled,
                '{}',
                json_request,
            )
            # NOTE: we need to `asyncio.shield` so that we can still
            # correctly wait for this future to complete even if we
            # are cancelled.
            assert json_result_future is not None
            json_result = await IMPORT_asyncio.shield(json_result_future)
        except IMPORT_asyncio.CancelledError:
            cancelled.set_result(None)

            # NOTE: unlike for a `writer` or `transaction`, we DO NOT
            # _need_ to wait for `json_result_future` because this is
            # a workflow and we can execute multiple workflows
            # simultaneously. That being said, we still want to give
            # good feedback that the RPC has been cancelled, and there
            # is no harm waiting because other writers can still be
            # called.
            if json_result_future is not None:
                await self._wait_for_cancelled(
                    json_result_future,
                    '{{ state.proto.name }}.{{ method.proto.name }}',
                )

            raise
        except:
            # Make sure we cancel the `cancelled` future either if an
            # exception is thrown or if the result is reeturned so
            # that we don't keep around resources related to it that
            # might cause us to run out of memory or worse, keep Node
            # from exiting because it is waiting for Python.
            cancelled.cancel()
            raise
        else:
            cancelled.cancel()

            result = IMPORT_json.loads(json_result)

            if 'response' in result:
                return IMPORT_google_protobuf_json_format.ParseDict(
                    result['response'],
                    {{ method.output_type }}(),
                )
            elif 'loop' in result:
                when = IMPORT_google_protobuf_timestamp_pb2.Timestamp()
                when.FromJsonString(result['loop']['when'])
                return IMPORT_reboot_aio_tasks.Loop(when=IMPORT_reboot_time_DateTimeWithTimeZone.from_protobuf_timestamp(when))
            elif 'status' in result:
                raise (
                    {{ state.proto.name }}
                    .{{ method.proto.name }}Aborted
                    .from_status(
                        IMPORT_google_protobuf_json_format.ParseDict(
                            result['status'],
                            IMPORT_google_rpc_status_pb2.Status(),
                        )
                    )
                )
    {% endif %}
        raise RuntimeError("Unexpected result from {{ method.proto.name }}")

    {% endfor %}
    {% endfor %}

{% endfor %}

############################ Reference Node adapters ############################
# Used by Node.js WeakReference implementations to access Python code and
# vice-versa. Relevant to clients.

{% for client in clients %}
class {{ client.proto.state_name }}WeakReferenceNodeAdaptor({{ client.proto.state_name }}.WeakReference[{{ client.proto.state_name }}.WeakReference._Schedule]):

    async def _call(  # type: ignore[override]
        self,
        *,
        callable: IMPORT_typing.Callable[[IMPORT_google_protobuf_message.Message], IMPORT_typing.Awaitable],
        aborted_type: type[IMPORT_rebootdev.aio.aborted.Aborted],
        request_type: type[IMPORT_google_protobuf_message.Message],
        json_request: str,
    ) -> str:
        request = request_type()

        try:
            IMPORT_google_protobuf_json_format.Parse(json_request, request)
            response = await callable(request)
        except IMPORT_google_protobuf_json_format.ParseError as parse_error:
            aborted_error = IMPORT_rebootdev.aio.aborted.SystemAborted(
                IMPORT_rbt_v1alpha1.errors_pb2.Unknown(),
                message=f"{parse_error}; "
                       "This is usually caused by a deeply nested protobuf message, which is not supported by protobuf.\n"
                        "See the limits here: https://protobuf.dev/programming-guides/proto-limits/"
                )

            return IMPORT_json.dumps(
                {
                    'status': IMPORT_google_protobuf_json_format.MessageToDict(
                        aborted_error.to_status()
                    )
                }
            )
        except BaseException as exception:
            if isinstance(exception, aborted_type):
                return IMPORT_json.dumps(
                    {
                        'status': IMPORT_google_protobuf_json_format.MessageToDict(
                            exception.to_status()
                        )
                    }
                )
            raise
        else:
            return IMPORT_json.dumps(
                {
                    'response': IMPORT_google_protobuf_json_format.MessageToDict(
                        response
                    )
                }
            )

    async def _schedule(  # type: ignore[override]
        self,
        *,
        method: str,
        context: IMPORT_reboot_aio_contexts.WriterContext | IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        schedule: IMPORT_reboot_time_DateTimeWithTimeZone,
        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency],
        request_type: type[IMPORT_google_protobuf_message.Message],
        json_request: str,
    ) -> str:
        request = request_type()

        IMPORT_google_protobuf_json_format.Parse(json_request, request)

        if isinstance(context, IMPORT_reboot_aio_contexts.WriterContext):
            task = getattr(
                {{ client.proto.state_name }}ServicerTasksStub(
                    context=context,
                    state_ref=context._state_ref,
                ),
                method,
            )(request, schedule=schedule)

            return IMPORT_json.dumps(
                {
                    'taskId': IMPORT_google_protobuf_json_format.MessageToDict(
                        task.task_id
                    )
                }
            )

        # Add scheduling information to the metadata.
        metadata: IMPORT_reboot_aio_types.GrpcMetadata = (
            (IMPORT_reboot_aio_headers.TASK_SCHEDULE, schedule.isoformat()),
        )

        task_id = await getattr(super()._tasks(context), method)(
            request,
            idempotency=idempotency,
            metadata=metadata,
        )

        return IMPORT_json.dumps(
            {
                'taskId': IMPORT_google_protobuf_json_format.MessageToDict(task_id)
            }
        )

    async def _reader(  # type: ignore[override]
        self,
        method: str,
        context: IMPORT_reboot_aio_contexts.ReaderContext | IMPORT_reboot_aio_contexts.WriterContext | IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        request_type: type[IMPORT_google_protobuf_message.Message],
        json_request: str,
        json_options: str,
    ) -> str:
        options = IMPORT_json.loads(json_options)
        method_handle = IMPORT_functools.partial(
            getattr(super()._reader(context), method),
            bearer_token=options.get("bearerToken"),
        )
        return await self._call(
            callable=method_handle,
            aborted_type=getattr(
                {{ client.proto.state_name }}, method + 'Aborted'
            ),
            request_type=request_type,
            json_request=json_request,
        )

    async def _writer(  # type: ignore[override]
        self,
        method: str,
        context: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        request_type: type[IMPORT_google_protobuf_message.Message],
        json_request: str,
        json_options: str,
    ) -> str:
        options = IMPORT_json.loads(json_options)

        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None

        if 'idempotency' in options:
            idempotency = IMPORT_reboot_aio_contexts.Context.idempotency(
                alias=options['idempotency'].get('alias'),
                key=options['idempotency'].get('key'),
                each_iteration=options['idempotency'].get('eachIteration', None),
            )

        if 'schedule' in options:
            when = IMPORT_google_protobuf_timestamp_pb2.Timestamp()
            when.FromJsonString(options['schedule']['when'])
            return await self._schedule(
                method=method,
                context=context,
                schedule=IMPORT_reboot_time_DateTimeWithTimeZone.from_protobuf_timestamp(when),
                idempotency=idempotency,
                request_type=request_type,
                json_request=json_request,
            )

        method_handle = IMPORT_functools.partial(
            getattr(super()._writer(context), method),
            idempotency=idempotency,
            bearer_token=options.get("bearerToken"),
        )
        return await self._call(
            callable=method_handle,
            aborted_type=getattr(
                {{ client.proto.state_name }}, method + 'Aborted'
            ),
            request_type=request_type,
            json_request=json_request,
        )

    async def _transaction(  # type: ignore[override]
        self,
        method: str,
        context: IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        request_type: type[IMPORT_google_protobuf_message.Message],
        json_request: str,
        json_options: str,
    ) -> str:
        options = IMPORT_json.loads(json_options)

        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None

        if 'idempotency' in options:
            idempotency = IMPORT_reboot_aio_contexts.Context.idempotency(
                alias=options['idempotency'].get('alias'),
                key=options['idempotency'].get('key'),
                each_iteration=options['idempotency'].get('eachIteration', None),
            )

        if 'schedule' in options:
            when = IMPORT_google_protobuf_timestamp_pb2.Timestamp()
            when.FromJsonString(options['schedule']['when'])
            return await self._schedule(
                method=method,
                context=context,
                schedule=IMPORT_reboot_time_DateTimeWithTimeZone.from_protobuf_timestamp(when),
                idempotency=idempotency,
                request_type=request_type,
                json_request=json_request,
            )

        method_handle = IMPORT_functools.partial(
            getattr(super()._workflow(context), method),
            idempotency=idempotency,
            bearer_token=options.get("bearerToken"),
        )
        return await self._call(
            callable=method_handle,
            aborted_type=getattr(
                {{ client.proto.state_name }}, method + 'Aborted'
            ),
            request_type=request_type,
            json_request=json_request,
        )

    async def _workflow(  # type: ignore[override]
        self,
        method: str,
        context: IMPORT_reboot_aio_contexts.WriterContext | IMPORT_reboot_aio_contexts.TransactionContext | IMPORT_reboot_aio_contexts.WorkflowContext | IMPORT_reboot_aio_external.ExternalContext,
        request_type: type[IMPORT_google_protobuf_message.Message],
        json_request: str,
        json_options: str,
    ) -> str:
        options = IMPORT_json.loads(json_options)

        idempotency: IMPORT_typing.Optional[IMPORT_reboot_aio_idempotency.Idempotency] = None

        if 'idempotency' in options:
            idempotency = IMPORT_reboot_aio_contexts.Context.idempotency(
                alias=options['idempotency'].get('alias'),
                key=options['idempotency'].get('key'),
                each_iteration=options['idempotency'].get('eachIteration', None),
            )

        assert 'schedule' in options

        when = IMPORT_google_protobuf_timestamp_pb2.Timestamp()
        when.FromJsonString(options['schedule']['when'])

        return await self._schedule(
            method=method,
            context=context,
            schedule=IMPORT_reboot_time_DateTimeWithTimeZone.from_protobuf_timestamp(when),
            idempotency=idempotency,
            request_type=request_type,
            json_request=json_request,
        )

{% endfor %}
# yapf: enable
